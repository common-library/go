// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: postgresql.sql

package pkg

import (
	"context"
)

const createTable01 = `-- name: CreateTable01 :exec
CREATE TABLE IF NOT EXISTS table01_for_postgresql (
  field01 TEXT PRIMARY KEY,
  field02 BIGINT NOT NULL
)
`

func (q *Queries) CreateTable01(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createTable01)
	return err
}

const deleteTable01 = `-- name: DeleteTable01 :exec
DELETE FROM table01_for_postgresql WHERE field01 = $1
`

func (q *Queries) DeleteTable01(ctx context.Context, field01 string) error {
	_, err := q.db.ExecContext(ctx, deleteTable01, field01)
	return err
}

const dropTable01 = `-- name: DropTable01 :exec
DROP TABLE IF EXISTS table01_for_postgresql
`

func (q *Queries) DropTable01(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, dropTable01)
	return err
}

const getTable01 = `-- name: GetTable01 :one
SELECT field01, field02 FROM table01_for_postgresql WHERE field01 = $1
`

func (q *Queries) GetTable01(ctx context.Context, field01 string) (Table01ForPostgresql, error) {
	row := q.db.QueryRowContext(ctx, getTable01, field01)
	var i Table01ForPostgresql
	err := row.Scan(&i.Field01, &i.Field02)
	return i, err
}

const insertTable01 = `-- name: InsertTable01 :one
INSERT INTO table01_for_postgresql(field01, field02) VALUES($1, $2) RETURNING field01, field02
`

type InsertTable01Params struct {
	Field01 string
	Field02 int64
}

func (q *Queries) InsertTable01(ctx context.Context, arg InsertTable01Params) (Table01ForPostgresql, error) {
	row := q.db.QueryRowContext(ctx, insertTable01, arg.Field01, arg.Field02)
	var i Table01ForPostgresql
	err := row.Scan(&i.Field01, &i.Field02)
	return i, err
}

const listTable01 = `-- name: ListTable01 :many
SELECT field01, field02 FROM table01_for_postgresql ORDER BY field01
`

func (q *Queries) ListTable01(ctx context.Context) ([]Table01ForPostgresql, error) {
	rows, err := q.db.QueryContext(ctx, listTable01)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Table01ForPostgresql
	for rows.Next() {
		var i Table01ForPostgresql
		if err := rows.Scan(&i.Field01, &i.Field02); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTable01 = `-- name: UpdateTable01 :exec
UPDATE table01_for_postgresql set field02 = $2 WHERE field01 = $1
`

type UpdateTable01Params struct {
	Field01 string
	Field02 int64
}

func (q *Queries) UpdateTable01(ctx context.Context, arg UpdateTable01Params) error {
	_, err := q.db.ExecContext(ctx, updateTable01, arg.Field01, arg.Field02)
	return err
}
