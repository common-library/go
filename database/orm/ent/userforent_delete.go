// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/common-library/go/database/orm/ent/predicate"
	"github.com/common-library/go/database/orm/ent/userforent"
)

// UserForEntDelete is the builder for deleting a UserForEnt entity.
type UserForEntDelete struct {
	config
	hooks    []Hook
	mutation *UserForEntMutation
}

// Where appends a list predicates to the UserForEntDelete builder.
func (ufed *UserForEntDelete) Where(ps ...predicate.UserForEnt) *UserForEntDelete {
	ufed.mutation.Where(ps...)
	return ufed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ufed *UserForEntDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ufed.sqlExec, ufed.mutation, ufed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ufed *UserForEntDelete) ExecX(ctx context.Context) int {
	n, err := ufed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ufed *UserForEntDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userforent.Table, sqlgraph.NewFieldSpec(userforent.FieldID, field.TypeInt))
	if ps := ufed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ufed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ufed.mutation.done = true
	return affected, err
}

// UserForEntDeleteOne is the builder for deleting a single UserForEnt entity.
type UserForEntDeleteOne struct {
	ufed *UserForEntDelete
}

// Where appends a list predicates to the UserForEntDelete builder.
func (ufedo *UserForEntDeleteOne) Where(ps ...predicate.UserForEnt) *UserForEntDeleteOne {
	ufedo.ufed.mutation.Where(ps...)
	return ufedo
}

// Exec executes the deletion query.
func (ufedo *UserForEntDeleteOne) Exec(ctx context.Context) error {
	n, err := ufedo.ufed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userforent.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ufedo *UserForEntDeleteOne) ExecX(ctx context.Context) {
	if err := ufedo.Exec(ctx); err != nil {
		panic(err)
	}
}
