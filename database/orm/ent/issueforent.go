// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/common-library/go/database/orm/ent/issueforent"
	"github.com/common-library/go/database/orm/ent/repositoryforent"
)

// IssueForEnt is the model entity for the IssueForEnt schema.
type IssueForEnt struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IssueForEntQuery when eager-loading is set.
	Edges                             IssueForEntEdges `json:"edges"`
	repository_for_ent_issue_for_ents *int
	selectValues                      sql.SelectValues
}

// IssueForEntEdges holds the relations/edges for other nodes in the graph.
type IssueForEntEdges struct {
	// Repository holds the value of the repository edge.
	Repository *RepositoryForEnt `json:"repository,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IssueForEntEdges) RepositoryOrErr() (*RepositoryForEnt, error) {
	if e.Repository != nil {
		return e.Repository, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: repositoryforent.Label}
	}
	return nil, &NotLoadedError{edge: "repository"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IssueForEnt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case issueforent.FieldID:
			values[i] = new(sql.NullInt64)
		case issueforent.ForeignKeys[0]: // repository_for_ent_issue_for_ents
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IssueForEnt fields.
func (ife *IssueForEnt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case issueforent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ife.ID = int(value.Int64)
		case issueforent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field repository_for_ent_issue_for_ents", value)
			} else if value.Valid {
				ife.repository_for_ent_issue_for_ents = new(int)
				*ife.repository_for_ent_issue_for_ents = int(value.Int64)
			}
		default:
			ife.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IssueForEnt.
// This includes values selected through modifiers, order, etc.
func (ife *IssueForEnt) Value(name string) (ent.Value, error) {
	return ife.selectValues.Get(name)
}

// QueryRepository queries the "repository" edge of the IssueForEnt entity.
func (ife *IssueForEnt) QueryRepository() *RepositoryForEntQuery {
	return NewIssueForEntClient(ife.config).QueryRepository(ife)
}

// Update returns a builder for updating this IssueForEnt.
// Note that you need to call IssueForEnt.Unwrap() before calling this method if this IssueForEnt
// was returned from a transaction, and the transaction was committed or rolled back.
func (ife *IssueForEnt) Update() *IssueForEntUpdateOne {
	return NewIssueForEntClient(ife.config).UpdateOne(ife)
}

// Unwrap unwraps the IssueForEnt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ife *IssueForEnt) Unwrap() *IssueForEnt {
	_tx, ok := ife.config.driver.(*txDriver)
	if !ok {
		panic("ent: IssueForEnt is not a transactional entity")
	}
	ife.config.driver = _tx.drv
	return ife
}

// String implements the fmt.Stringer.
func (ife *IssueForEnt) String() string {
	var builder strings.Builder
	builder.WriteString("IssueForEnt(")
	builder.WriteString(fmt.Sprintf("id=%v", ife.ID))
	builder.WriteByte(')')
	return builder.String()
}

// IssueForEnts is a parsable slice of IssueForEnt.
type IssueForEnts []*IssueForEnt
