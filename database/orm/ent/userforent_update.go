// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/common-library/go/database/orm/ent/predicate"
	"github.com/common-library/go/database/orm/ent/repositoryforent"
	"github.com/common-library/go/database/orm/ent/userforent"
)

// UserForEntUpdate is the builder for updating UserForEnt entities.
type UserForEntUpdate struct {
	config
	hooks    []Hook
	mutation *UserForEntMutation
}

// Where appends a list predicates to the UserForEntUpdate builder.
func (ufeu *UserForEntUpdate) Where(ps ...predicate.UserForEnt) *UserForEntUpdate {
	ufeu.mutation.Where(ps...)
	return ufeu
}

// AddRepositoryForEntIDs adds the "repository_for_ents" edge to the RepositoryForEnt entity by IDs.
func (ufeu *UserForEntUpdate) AddRepositoryForEntIDs(ids ...int) *UserForEntUpdate {
	ufeu.mutation.AddRepositoryForEntIDs(ids...)
	return ufeu
}

// AddRepositoryForEnts adds the "repository_for_ents" edges to the RepositoryForEnt entity.
func (ufeu *UserForEntUpdate) AddRepositoryForEnts(r ...*RepositoryForEnt) *UserForEntUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ufeu.AddRepositoryForEntIDs(ids...)
}

// Mutation returns the UserForEntMutation object of the builder.
func (ufeu *UserForEntUpdate) Mutation() *UserForEntMutation {
	return ufeu.mutation
}

// ClearRepositoryForEnts clears all "repository_for_ents" edges to the RepositoryForEnt entity.
func (ufeu *UserForEntUpdate) ClearRepositoryForEnts() *UserForEntUpdate {
	ufeu.mutation.ClearRepositoryForEnts()
	return ufeu
}

// RemoveRepositoryForEntIDs removes the "repository_for_ents" edge to RepositoryForEnt entities by IDs.
func (ufeu *UserForEntUpdate) RemoveRepositoryForEntIDs(ids ...int) *UserForEntUpdate {
	ufeu.mutation.RemoveRepositoryForEntIDs(ids...)
	return ufeu
}

// RemoveRepositoryForEnts removes "repository_for_ents" edges to RepositoryForEnt entities.
func (ufeu *UserForEntUpdate) RemoveRepositoryForEnts(r ...*RepositoryForEnt) *UserForEntUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ufeu.RemoveRepositoryForEntIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufeu *UserForEntUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ufeu.sqlSave, ufeu.mutation, ufeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufeu *UserForEntUpdate) SaveX(ctx context.Context) int {
	affected, err := ufeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufeu *UserForEntUpdate) Exec(ctx context.Context) error {
	_, err := ufeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufeu *UserForEntUpdate) ExecX(ctx context.Context) {
	if err := ufeu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufeu *UserForEntUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userforent.Table, userforent.Columns, sqlgraph.NewFieldSpec(userforent.FieldID, field.TypeInt))
	if ps := ufeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ufeu.mutation.RepositoryForEntsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userforent.RepositoryForEntsTable,
			Columns: userforent.RepositoryForEntsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repositoryforent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufeu.mutation.RemovedRepositoryForEntsIDs(); len(nodes) > 0 && !ufeu.mutation.RepositoryForEntsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userforent.RepositoryForEntsTable,
			Columns: userforent.RepositoryForEntsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repositoryforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufeu.mutation.RepositoryForEntsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userforent.RepositoryForEntsTable,
			Columns: userforent.RepositoryForEntsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repositoryforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userforent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufeu.mutation.done = true
	return n, nil
}

// UserForEntUpdateOne is the builder for updating a single UserForEnt entity.
type UserForEntUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserForEntMutation
}

// AddRepositoryForEntIDs adds the "repository_for_ents" edge to the RepositoryForEnt entity by IDs.
func (ufeuo *UserForEntUpdateOne) AddRepositoryForEntIDs(ids ...int) *UserForEntUpdateOne {
	ufeuo.mutation.AddRepositoryForEntIDs(ids...)
	return ufeuo
}

// AddRepositoryForEnts adds the "repository_for_ents" edges to the RepositoryForEnt entity.
func (ufeuo *UserForEntUpdateOne) AddRepositoryForEnts(r ...*RepositoryForEnt) *UserForEntUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ufeuo.AddRepositoryForEntIDs(ids...)
}

// Mutation returns the UserForEntMutation object of the builder.
func (ufeuo *UserForEntUpdateOne) Mutation() *UserForEntMutation {
	return ufeuo.mutation
}

// ClearRepositoryForEnts clears all "repository_for_ents" edges to the RepositoryForEnt entity.
func (ufeuo *UserForEntUpdateOne) ClearRepositoryForEnts() *UserForEntUpdateOne {
	ufeuo.mutation.ClearRepositoryForEnts()
	return ufeuo
}

// RemoveRepositoryForEntIDs removes the "repository_for_ents" edge to RepositoryForEnt entities by IDs.
func (ufeuo *UserForEntUpdateOne) RemoveRepositoryForEntIDs(ids ...int) *UserForEntUpdateOne {
	ufeuo.mutation.RemoveRepositoryForEntIDs(ids...)
	return ufeuo
}

// RemoveRepositoryForEnts removes "repository_for_ents" edges to RepositoryForEnt entities.
func (ufeuo *UserForEntUpdateOne) RemoveRepositoryForEnts(r ...*RepositoryForEnt) *UserForEntUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ufeuo.RemoveRepositoryForEntIDs(ids...)
}

// Where appends a list predicates to the UserForEntUpdate builder.
func (ufeuo *UserForEntUpdateOne) Where(ps ...predicate.UserForEnt) *UserForEntUpdateOne {
	ufeuo.mutation.Where(ps...)
	return ufeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufeuo *UserForEntUpdateOne) Select(field string, fields ...string) *UserForEntUpdateOne {
	ufeuo.fields = append([]string{field}, fields...)
	return ufeuo
}

// Save executes the query and returns the updated UserForEnt entity.
func (ufeuo *UserForEntUpdateOne) Save(ctx context.Context) (*UserForEnt, error) {
	return withHooks(ctx, ufeuo.sqlSave, ufeuo.mutation, ufeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufeuo *UserForEntUpdateOne) SaveX(ctx context.Context) *UserForEnt {
	node, err := ufeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufeuo *UserForEntUpdateOne) Exec(ctx context.Context) error {
	_, err := ufeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufeuo *UserForEntUpdateOne) ExecX(ctx context.Context) {
	if err := ufeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufeuo *UserForEntUpdateOne) sqlSave(ctx context.Context) (_node *UserForEnt, err error) {
	_spec := sqlgraph.NewUpdateSpec(userforent.Table, userforent.Columns, sqlgraph.NewFieldSpec(userforent.FieldID, field.TypeInt))
	id, ok := ufeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserForEnt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userforent.FieldID)
		for _, f := range fields {
			if !userforent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userforent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ufeuo.mutation.RepositoryForEntsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userforent.RepositoryForEntsTable,
			Columns: userforent.RepositoryForEntsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repositoryforent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufeuo.mutation.RemovedRepositoryForEntsIDs(); len(nodes) > 0 && !ufeuo.mutation.RepositoryForEntsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userforent.RepositoryForEntsTable,
			Columns: userforent.RepositoryForEntsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repositoryforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufeuo.mutation.RepositoryForEntsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userforent.RepositoryForEntsTable,
			Columns: userforent.RepositoryForEntsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repositoryforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserForEnt{config: ufeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userforent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufeuo.mutation.done = true
	return _node, nil
}
