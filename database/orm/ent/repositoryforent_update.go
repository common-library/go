// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/common-library/go/database/orm/ent/issueforent"
	"github.com/common-library/go/database/orm/ent/predicate"
	"github.com/common-library/go/database/orm/ent/repositoryforent"
	"github.com/common-library/go/database/orm/ent/userforent"
)

// RepositoryForEntUpdate is the builder for updating RepositoryForEnt entities.
type RepositoryForEntUpdate struct {
	config
	hooks    []Hook
	mutation *RepositoryForEntMutation
}

// Where appends a list predicates to the RepositoryForEntUpdate builder.
func (rfeu *RepositoryForEntUpdate) Where(ps ...predicate.RepositoryForEnt) *RepositoryForEntUpdate {
	rfeu.mutation.Where(ps...)
	return rfeu
}

// AddUserForEntIDs adds the "user_for_ents" edge to the UserForEnt entity by IDs.
func (rfeu *RepositoryForEntUpdate) AddUserForEntIDs(ids ...int) *RepositoryForEntUpdate {
	rfeu.mutation.AddUserForEntIDs(ids...)
	return rfeu
}

// AddUserForEnts adds the "user_for_ents" edges to the UserForEnt entity.
func (rfeu *RepositoryForEntUpdate) AddUserForEnts(u ...*UserForEnt) *RepositoryForEntUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rfeu.AddUserForEntIDs(ids...)
}

// AddIssueForEntIDs adds the "issue_for_ents" edge to the IssueForEnt entity by IDs.
func (rfeu *RepositoryForEntUpdate) AddIssueForEntIDs(ids ...int) *RepositoryForEntUpdate {
	rfeu.mutation.AddIssueForEntIDs(ids...)
	return rfeu
}

// AddIssueForEnts adds the "issue_for_ents" edges to the IssueForEnt entity.
func (rfeu *RepositoryForEntUpdate) AddIssueForEnts(i ...*IssueForEnt) *RepositoryForEntUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return rfeu.AddIssueForEntIDs(ids...)
}

// Mutation returns the RepositoryForEntMutation object of the builder.
func (rfeu *RepositoryForEntUpdate) Mutation() *RepositoryForEntMutation {
	return rfeu.mutation
}

// ClearUserForEnts clears all "user_for_ents" edges to the UserForEnt entity.
func (rfeu *RepositoryForEntUpdate) ClearUserForEnts() *RepositoryForEntUpdate {
	rfeu.mutation.ClearUserForEnts()
	return rfeu
}

// RemoveUserForEntIDs removes the "user_for_ents" edge to UserForEnt entities by IDs.
func (rfeu *RepositoryForEntUpdate) RemoveUserForEntIDs(ids ...int) *RepositoryForEntUpdate {
	rfeu.mutation.RemoveUserForEntIDs(ids...)
	return rfeu
}

// RemoveUserForEnts removes "user_for_ents" edges to UserForEnt entities.
func (rfeu *RepositoryForEntUpdate) RemoveUserForEnts(u ...*UserForEnt) *RepositoryForEntUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rfeu.RemoveUserForEntIDs(ids...)
}

// ClearIssueForEnts clears all "issue_for_ents" edges to the IssueForEnt entity.
func (rfeu *RepositoryForEntUpdate) ClearIssueForEnts() *RepositoryForEntUpdate {
	rfeu.mutation.ClearIssueForEnts()
	return rfeu
}

// RemoveIssueForEntIDs removes the "issue_for_ents" edge to IssueForEnt entities by IDs.
func (rfeu *RepositoryForEntUpdate) RemoveIssueForEntIDs(ids ...int) *RepositoryForEntUpdate {
	rfeu.mutation.RemoveIssueForEntIDs(ids...)
	return rfeu
}

// RemoveIssueForEnts removes "issue_for_ents" edges to IssueForEnt entities.
func (rfeu *RepositoryForEntUpdate) RemoveIssueForEnts(i ...*IssueForEnt) *RepositoryForEntUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return rfeu.RemoveIssueForEntIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rfeu *RepositoryForEntUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rfeu.sqlSave, rfeu.mutation, rfeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rfeu *RepositoryForEntUpdate) SaveX(ctx context.Context) int {
	affected, err := rfeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rfeu *RepositoryForEntUpdate) Exec(ctx context.Context) error {
	_, err := rfeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfeu *RepositoryForEntUpdate) ExecX(ctx context.Context) {
	if err := rfeu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rfeu *RepositoryForEntUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(repositoryforent.Table, repositoryforent.Columns, sqlgraph.NewFieldSpec(repositoryforent.FieldID, field.TypeInt))
	if ps := rfeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rfeu.mutation.UserForEntsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repositoryforent.UserForEntsTable,
			Columns: repositoryforent.UserForEntsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userforent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfeu.mutation.RemovedUserForEntsIDs(); len(nodes) > 0 && !rfeu.mutation.UserForEntsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repositoryforent.UserForEntsTable,
			Columns: repositoryforent.UserForEntsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfeu.mutation.UserForEntsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repositoryforent.UserForEntsTable,
			Columns: repositoryforent.UserForEntsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rfeu.mutation.IssueForEntsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repositoryforent.IssueForEntsTable,
			Columns: []string{repositoryforent.IssueForEntsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issueforent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfeu.mutation.RemovedIssueForEntsIDs(); len(nodes) > 0 && !rfeu.mutation.IssueForEntsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repositoryforent.IssueForEntsTable,
			Columns: []string{repositoryforent.IssueForEntsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issueforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfeu.mutation.IssueForEntsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repositoryforent.IssueForEntsTable,
			Columns: []string{repositoryforent.IssueForEntsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issueforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rfeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repositoryforent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rfeu.mutation.done = true
	return n, nil
}

// RepositoryForEntUpdateOne is the builder for updating a single RepositoryForEnt entity.
type RepositoryForEntUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepositoryForEntMutation
}

// AddUserForEntIDs adds the "user_for_ents" edge to the UserForEnt entity by IDs.
func (rfeuo *RepositoryForEntUpdateOne) AddUserForEntIDs(ids ...int) *RepositoryForEntUpdateOne {
	rfeuo.mutation.AddUserForEntIDs(ids...)
	return rfeuo
}

// AddUserForEnts adds the "user_for_ents" edges to the UserForEnt entity.
func (rfeuo *RepositoryForEntUpdateOne) AddUserForEnts(u ...*UserForEnt) *RepositoryForEntUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rfeuo.AddUserForEntIDs(ids...)
}

// AddIssueForEntIDs adds the "issue_for_ents" edge to the IssueForEnt entity by IDs.
func (rfeuo *RepositoryForEntUpdateOne) AddIssueForEntIDs(ids ...int) *RepositoryForEntUpdateOne {
	rfeuo.mutation.AddIssueForEntIDs(ids...)
	return rfeuo
}

// AddIssueForEnts adds the "issue_for_ents" edges to the IssueForEnt entity.
func (rfeuo *RepositoryForEntUpdateOne) AddIssueForEnts(i ...*IssueForEnt) *RepositoryForEntUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return rfeuo.AddIssueForEntIDs(ids...)
}

// Mutation returns the RepositoryForEntMutation object of the builder.
func (rfeuo *RepositoryForEntUpdateOne) Mutation() *RepositoryForEntMutation {
	return rfeuo.mutation
}

// ClearUserForEnts clears all "user_for_ents" edges to the UserForEnt entity.
func (rfeuo *RepositoryForEntUpdateOne) ClearUserForEnts() *RepositoryForEntUpdateOne {
	rfeuo.mutation.ClearUserForEnts()
	return rfeuo
}

// RemoveUserForEntIDs removes the "user_for_ents" edge to UserForEnt entities by IDs.
func (rfeuo *RepositoryForEntUpdateOne) RemoveUserForEntIDs(ids ...int) *RepositoryForEntUpdateOne {
	rfeuo.mutation.RemoveUserForEntIDs(ids...)
	return rfeuo
}

// RemoveUserForEnts removes "user_for_ents" edges to UserForEnt entities.
func (rfeuo *RepositoryForEntUpdateOne) RemoveUserForEnts(u ...*UserForEnt) *RepositoryForEntUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rfeuo.RemoveUserForEntIDs(ids...)
}

// ClearIssueForEnts clears all "issue_for_ents" edges to the IssueForEnt entity.
func (rfeuo *RepositoryForEntUpdateOne) ClearIssueForEnts() *RepositoryForEntUpdateOne {
	rfeuo.mutation.ClearIssueForEnts()
	return rfeuo
}

// RemoveIssueForEntIDs removes the "issue_for_ents" edge to IssueForEnt entities by IDs.
func (rfeuo *RepositoryForEntUpdateOne) RemoveIssueForEntIDs(ids ...int) *RepositoryForEntUpdateOne {
	rfeuo.mutation.RemoveIssueForEntIDs(ids...)
	return rfeuo
}

// RemoveIssueForEnts removes "issue_for_ents" edges to IssueForEnt entities.
func (rfeuo *RepositoryForEntUpdateOne) RemoveIssueForEnts(i ...*IssueForEnt) *RepositoryForEntUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return rfeuo.RemoveIssueForEntIDs(ids...)
}

// Where appends a list predicates to the RepositoryForEntUpdate builder.
func (rfeuo *RepositoryForEntUpdateOne) Where(ps ...predicate.RepositoryForEnt) *RepositoryForEntUpdateOne {
	rfeuo.mutation.Where(ps...)
	return rfeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rfeuo *RepositoryForEntUpdateOne) Select(field string, fields ...string) *RepositoryForEntUpdateOne {
	rfeuo.fields = append([]string{field}, fields...)
	return rfeuo
}

// Save executes the query and returns the updated RepositoryForEnt entity.
func (rfeuo *RepositoryForEntUpdateOne) Save(ctx context.Context) (*RepositoryForEnt, error) {
	return withHooks(ctx, rfeuo.sqlSave, rfeuo.mutation, rfeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rfeuo *RepositoryForEntUpdateOne) SaveX(ctx context.Context) *RepositoryForEnt {
	node, err := rfeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rfeuo *RepositoryForEntUpdateOne) Exec(ctx context.Context) error {
	_, err := rfeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfeuo *RepositoryForEntUpdateOne) ExecX(ctx context.Context) {
	if err := rfeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rfeuo *RepositoryForEntUpdateOne) sqlSave(ctx context.Context) (_node *RepositoryForEnt, err error) {
	_spec := sqlgraph.NewUpdateSpec(repositoryforent.Table, repositoryforent.Columns, sqlgraph.NewFieldSpec(repositoryforent.FieldID, field.TypeInt))
	id, ok := rfeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RepositoryForEnt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rfeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repositoryforent.FieldID)
		for _, f := range fields {
			if !repositoryforent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repositoryforent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rfeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rfeuo.mutation.UserForEntsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repositoryforent.UserForEntsTable,
			Columns: repositoryforent.UserForEntsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userforent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfeuo.mutation.RemovedUserForEntsIDs(); len(nodes) > 0 && !rfeuo.mutation.UserForEntsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repositoryforent.UserForEntsTable,
			Columns: repositoryforent.UserForEntsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfeuo.mutation.UserForEntsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   repositoryforent.UserForEntsTable,
			Columns: repositoryforent.UserForEntsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rfeuo.mutation.IssueForEntsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repositoryforent.IssueForEntsTable,
			Columns: []string{repositoryforent.IssueForEntsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issueforent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfeuo.mutation.RemovedIssueForEntsIDs(); len(nodes) > 0 && !rfeuo.mutation.IssueForEntsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repositoryforent.IssueForEntsTable,
			Columns: []string{repositoryforent.IssueForEntsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issueforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfeuo.mutation.IssueForEntsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repositoryforent.IssueForEntsTable,
			Columns: []string{repositoryforent.IssueForEntsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issueforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RepositoryForEnt{config: rfeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rfeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repositoryforent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rfeuo.mutation.done = true
	return _node, nil
}
