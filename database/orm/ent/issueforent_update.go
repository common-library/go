// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/common-library/go/database/orm/ent/issueforent"
	"github.com/common-library/go/database/orm/ent/predicate"
	"github.com/common-library/go/database/orm/ent/repositoryforent"
)

// IssueForEntUpdate is the builder for updating IssueForEnt entities.
type IssueForEntUpdate struct {
	config
	hooks    []Hook
	mutation *IssueForEntMutation
}

// Where appends a list predicates to the IssueForEntUpdate builder.
func (ifeu *IssueForEntUpdate) Where(ps ...predicate.IssueForEnt) *IssueForEntUpdate {
	ifeu.mutation.Where(ps...)
	return ifeu
}

// SetRepositoryID sets the "repository" edge to the RepositoryForEnt entity by ID.
func (ifeu *IssueForEntUpdate) SetRepositoryID(id int) *IssueForEntUpdate {
	ifeu.mutation.SetRepositoryID(id)
	return ifeu
}

// SetNillableRepositoryID sets the "repository" edge to the RepositoryForEnt entity by ID if the given value is not nil.
func (ifeu *IssueForEntUpdate) SetNillableRepositoryID(id *int) *IssueForEntUpdate {
	if id != nil {
		ifeu = ifeu.SetRepositoryID(*id)
	}
	return ifeu
}

// SetRepository sets the "repository" edge to the RepositoryForEnt entity.
func (ifeu *IssueForEntUpdate) SetRepository(r *RepositoryForEnt) *IssueForEntUpdate {
	return ifeu.SetRepositoryID(r.ID)
}

// Mutation returns the IssueForEntMutation object of the builder.
func (ifeu *IssueForEntUpdate) Mutation() *IssueForEntMutation {
	return ifeu.mutation
}

// ClearRepository clears the "repository" edge to the RepositoryForEnt entity.
func (ifeu *IssueForEntUpdate) ClearRepository() *IssueForEntUpdate {
	ifeu.mutation.ClearRepository()
	return ifeu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ifeu *IssueForEntUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ifeu.sqlSave, ifeu.mutation, ifeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ifeu *IssueForEntUpdate) SaveX(ctx context.Context) int {
	affected, err := ifeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ifeu *IssueForEntUpdate) Exec(ctx context.Context) error {
	_, err := ifeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifeu *IssueForEntUpdate) ExecX(ctx context.Context) {
	if err := ifeu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ifeu *IssueForEntUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(issueforent.Table, issueforent.Columns, sqlgraph.NewFieldSpec(issueforent.FieldID, field.TypeInt))
	if ps := ifeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ifeu.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issueforent.RepositoryTable,
			Columns: []string{issueforent.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repositoryforent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifeu.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issueforent.RepositoryTable,
			Columns: []string{issueforent.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repositoryforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ifeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{issueforent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ifeu.mutation.done = true
	return n, nil
}

// IssueForEntUpdateOne is the builder for updating a single IssueForEnt entity.
type IssueForEntUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IssueForEntMutation
}

// SetRepositoryID sets the "repository" edge to the RepositoryForEnt entity by ID.
func (ifeuo *IssueForEntUpdateOne) SetRepositoryID(id int) *IssueForEntUpdateOne {
	ifeuo.mutation.SetRepositoryID(id)
	return ifeuo
}

// SetNillableRepositoryID sets the "repository" edge to the RepositoryForEnt entity by ID if the given value is not nil.
func (ifeuo *IssueForEntUpdateOne) SetNillableRepositoryID(id *int) *IssueForEntUpdateOne {
	if id != nil {
		ifeuo = ifeuo.SetRepositoryID(*id)
	}
	return ifeuo
}

// SetRepository sets the "repository" edge to the RepositoryForEnt entity.
func (ifeuo *IssueForEntUpdateOne) SetRepository(r *RepositoryForEnt) *IssueForEntUpdateOne {
	return ifeuo.SetRepositoryID(r.ID)
}

// Mutation returns the IssueForEntMutation object of the builder.
func (ifeuo *IssueForEntUpdateOne) Mutation() *IssueForEntMutation {
	return ifeuo.mutation
}

// ClearRepository clears the "repository" edge to the RepositoryForEnt entity.
func (ifeuo *IssueForEntUpdateOne) ClearRepository() *IssueForEntUpdateOne {
	ifeuo.mutation.ClearRepository()
	return ifeuo
}

// Where appends a list predicates to the IssueForEntUpdate builder.
func (ifeuo *IssueForEntUpdateOne) Where(ps ...predicate.IssueForEnt) *IssueForEntUpdateOne {
	ifeuo.mutation.Where(ps...)
	return ifeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ifeuo *IssueForEntUpdateOne) Select(field string, fields ...string) *IssueForEntUpdateOne {
	ifeuo.fields = append([]string{field}, fields...)
	return ifeuo
}

// Save executes the query and returns the updated IssueForEnt entity.
func (ifeuo *IssueForEntUpdateOne) Save(ctx context.Context) (*IssueForEnt, error) {
	return withHooks(ctx, ifeuo.sqlSave, ifeuo.mutation, ifeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ifeuo *IssueForEntUpdateOne) SaveX(ctx context.Context) *IssueForEnt {
	node, err := ifeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ifeuo *IssueForEntUpdateOne) Exec(ctx context.Context) error {
	_, err := ifeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifeuo *IssueForEntUpdateOne) ExecX(ctx context.Context) {
	if err := ifeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ifeuo *IssueForEntUpdateOne) sqlSave(ctx context.Context) (_node *IssueForEnt, err error) {
	_spec := sqlgraph.NewUpdateSpec(issueforent.Table, issueforent.Columns, sqlgraph.NewFieldSpec(issueforent.FieldID, field.TypeInt))
	id, ok := ifeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IssueForEnt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ifeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, issueforent.FieldID)
		for _, f := range fields {
			if !issueforent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != issueforent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ifeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ifeuo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issueforent.RepositoryTable,
			Columns: []string{issueforent.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repositoryforent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifeuo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issueforent.RepositoryTable,
			Columns: []string{issueforent.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repositoryforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IssueForEnt{config: ifeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ifeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{issueforent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ifeuo.mutation.done = true
	return _node, nil
}
