// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/common-library/go/database/orm/ent/repositoryforent"
)

// RepositoryForEnt is the model entity for the RepositoryForEnt schema.
type RepositoryForEnt struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RepositoryForEntQuery when eager-loading is set.
	Edges        RepositoryForEntEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RepositoryForEntEdges holds the relations/edges for other nodes in the graph.
type RepositoryForEntEdges struct {
	// UserForEnts holds the value of the user_for_ents edge.
	UserForEnts []*UserForEnt `json:"user_for_ents,omitempty"`
	// IssueForEnts holds the value of the issue_for_ents edge.
	IssueForEnts []*IssueForEnt `json:"issue_for_ents,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserForEntsOrErr returns the UserForEnts value or an error if the edge
// was not loaded in eager-loading.
func (e RepositoryForEntEdges) UserForEntsOrErr() ([]*UserForEnt, error) {
	if e.loadedTypes[0] {
		return e.UserForEnts, nil
	}
	return nil, &NotLoadedError{edge: "user_for_ents"}
}

// IssueForEntsOrErr returns the IssueForEnts value or an error if the edge
// was not loaded in eager-loading.
func (e RepositoryForEntEdges) IssueForEntsOrErr() ([]*IssueForEnt, error) {
	if e.loadedTypes[1] {
		return e.IssueForEnts, nil
	}
	return nil, &NotLoadedError{edge: "issue_for_ents"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RepositoryForEnt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case repositoryforent.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RepositoryForEnt fields.
func (rfe *RepositoryForEnt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case repositoryforent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rfe.ID = int(value.Int64)
		default:
			rfe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RepositoryForEnt.
// This includes values selected through modifiers, order, etc.
func (rfe *RepositoryForEnt) Value(name string) (ent.Value, error) {
	return rfe.selectValues.Get(name)
}

// QueryUserForEnts queries the "user_for_ents" edge of the RepositoryForEnt entity.
func (rfe *RepositoryForEnt) QueryUserForEnts() *UserForEntQuery {
	return NewRepositoryForEntClient(rfe.config).QueryUserForEnts(rfe)
}

// QueryIssueForEnts queries the "issue_for_ents" edge of the RepositoryForEnt entity.
func (rfe *RepositoryForEnt) QueryIssueForEnts() *IssueForEntQuery {
	return NewRepositoryForEntClient(rfe.config).QueryIssueForEnts(rfe)
}

// Update returns a builder for updating this RepositoryForEnt.
// Note that you need to call RepositoryForEnt.Unwrap() before calling this method if this RepositoryForEnt
// was returned from a transaction, and the transaction was committed or rolled back.
func (rfe *RepositoryForEnt) Update() *RepositoryForEntUpdateOne {
	return NewRepositoryForEntClient(rfe.config).UpdateOne(rfe)
}

// Unwrap unwraps the RepositoryForEnt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rfe *RepositoryForEnt) Unwrap() *RepositoryForEnt {
	_tx, ok := rfe.config.driver.(*txDriver)
	if !ok {
		panic("ent: RepositoryForEnt is not a transactional entity")
	}
	rfe.config.driver = _tx.drv
	return rfe
}

// String implements the fmt.Stringer.
func (rfe *RepositoryForEnt) String() string {
	var builder strings.Builder
	builder.WriteString("RepositoryForEnt(")
	builder.WriteString(fmt.Sprintf("id=%v", rfe.ID))
	builder.WriteByte(')')
	return builder.String()
}

// RepositoryForEnts is a parsable slice of RepositoryForEnt.
type RepositoryForEnts []*RepositoryForEnt
