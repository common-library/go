// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/common-library/go/database/orm/ent/predicate"
	"github.com/common-library/go/database/orm/ent/repositoryforent"
)

// RepositoryForEntDelete is the builder for deleting a RepositoryForEnt entity.
type RepositoryForEntDelete struct {
	config
	hooks    []Hook
	mutation *RepositoryForEntMutation
}

// Where appends a list predicates to the RepositoryForEntDelete builder.
func (rfed *RepositoryForEntDelete) Where(ps ...predicate.RepositoryForEnt) *RepositoryForEntDelete {
	rfed.mutation.Where(ps...)
	return rfed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rfed *RepositoryForEntDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rfed.sqlExec, rfed.mutation, rfed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rfed *RepositoryForEntDelete) ExecX(ctx context.Context) int {
	n, err := rfed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rfed *RepositoryForEntDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(repositoryforent.Table, sqlgraph.NewFieldSpec(repositoryforent.FieldID, field.TypeInt))
	if ps := rfed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rfed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rfed.mutation.done = true
	return affected, err
}

// RepositoryForEntDeleteOne is the builder for deleting a single RepositoryForEnt entity.
type RepositoryForEntDeleteOne struct {
	rfed *RepositoryForEntDelete
}

// Where appends a list predicates to the RepositoryForEntDelete builder.
func (rfedo *RepositoryForEntDeleteOne) Where(ps ...predicate.RepositoryForEnt) *RepositoryForEntDeleteOne {
	rfedo.rfed.mutation.Where(ps...)
	return rfedo
}

// Exec executes the deletion query.
func (rfedo *RepositoryForEntDeleteOne) Exec(ctx context.Context) error {
	n, err := rfedo.rfed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{repositoryforent.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rfedo *RepositoryForEntDeleteOne) ExecX(ctx context.Context) {
	if err := rfedo.Exec(ctx); err != nil {
		panic(err)
	}
}
