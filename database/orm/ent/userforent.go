// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/common-library/go/database/orm/ent/userforent"
)

// UserForEnt is the model entity for the UserForEnt schema.
type UserForEnt struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserForEntQuery when eager-loading is set.
	Edges        UserForEntEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserForEntEdges holds the relations/edges for other nodes in the graph.
type UserForEntEdges struct {
	// RepositoryForEnts holds the value of the repository_for_ents edge.
	RepositoryForEnts []*RepositoryForEnt `json:"repository_for_ents,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RepositoryForEntsOrErr returns the RepositoryForEnts value or an error if the edge
// was not loaded in eager-loading.
func (e UserForEntEdges) RepositoryForEntsOrErr() ([]*RepositoryForEnt, error) {
	if e.loadedTypes[0] {
		return e.RepositoryForEnts, nil
	}
	return nil, &NotLoadedError{edge: "repository_for_ents"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserForEnt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userforent.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserForEnt fields.
func (ufe *UserForEnt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userforent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ufe.ID = int(value.Int64)
		default:
			ufe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserForEnt.
// This includes values selected through modifiers, order, etc.
func (ufe *UserForEnt) Value(name string) (ent.Value, error) {
	return ufe.selectValues.Get(name)
}

// QueryRepositoryForEnts queries the "repository_for_ents" edge of the UserForEnt entity.
func (ufe *UserForEnt) QueryRepositoryForEnts() *RepositoryForEntQuery {
	return NewUserForEntClient(ufe.config).QueryRepositoryForEnts(ufe)
}

// Update returns a builder for updating this UserForEnt.
// Note that you need to call UserForEnt.Unwrap() before calling this method if this UserForEnt
// was returned from a transaction, and the transaction was committed or rolled back.
func (ufe *UserForEnt) Update() *UserForEntUpdateOne {
	return NewUserForEntClient(ufe.config).UpdateOne(ufe)
}

// Unwrap unwraps the UserForEnt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ufe *UserForEnt) Unwrap() *UserForEnt {
	_tx, ok := ufe.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserForEnt is not a transactional entity")
	}
	ufe.config.driver = _tx.drv
	return ufe
}

// String implements the fmt.Stringer.
func (ufe *UserForEnt) String() string {
	var builder strings.Builder
	builder.WriteString("UserForEnt(")
	builder.WriteString(fmt.Sprintf("id=%v", ufe.ID))
	builder.WriteByte(')')
	return builder.String()
}

// UserForEnts is a parsable slice of UserForEnt.
type UserForEnts []*UserForEnt
