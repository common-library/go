// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/common-library/go/database/orm/ent/table01forent"
)

// Table01ForEntCreate is the builder for creating a Table01ForEnt entity.
type Table01ForEntCreate struct {
	config
	mutation *Table01ForEntMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCommonField01 sets the "common_field01" field.
func (tec *Table01ForEntCreate) SetCommonField01(i int) *Table01ForEntCreate {
	tec.mutation.SetCommonField01(i)
	return tec
}

// SetNillableCommonField01 sets the "common_field01" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableCommonField01(i *int) *Table01ForEntCreate {
	if i != nil {
		tec.SetCommonField01(*i)
	}
	return tec
}

// SetCreateTime sets the "create_time" field.
func (tec *Table01ForEntCreate) SetCreateTime(t time.Time) *Table01ForEntCreate {
	tec.mutation.SetCreateTime(t)
	return tec
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableCreateTime(t *time.Time) *Table01ForEntCreate {
	if t != nil {
		tec.SetCreateTime(*t)
	}
	return tec
}

// SetUpdateTime sets the "update_time" field.
func (tec *Table01ForEntCreate) SetUpdateTime(t time.Time) *Table01ForEntCreate {
	tec.mutation.SetUpdateTime(t)
	return tec
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableUpdateTime(t *time.Time) *Table01ForEntCreate {
	if t != nil {
		tec.SetUpdateTime(*t)
	}
	return tec
}

// SetField01 sets the "field01" field.
func (tec *Table01ForEntCreate) SetField01(s string) *Table01ForEntCreate {
	tec.mutation.SetField01(s)
	return tec
}

// SetField02 sets the "field02" field.
func (tec *Table01ForEntCreate) SetField02(i int) *Table01ForEntCreate {
	tec.mutation.SetField02(i)
	return tec
}

// SetField03 sets the "field03" field.
func (tec *Table01ForEntCreate) SetField03(b bool) *Table01ForEntCreate {
	tec.mutation.SetField03(b)
	return tec
}

// SetNillableField03 sets the "field03" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableField03(b *bool) *Table01ForEntCreate {
	if b != nil {
		tec.SetField03(*b)
	}
	return tec
}

// SetField04 sets the "field04" field.
func (tec *Table01ForEntCreate) SetField04(t table01forent.Field04) *Table01ForEntCreate {
	tec.mutation.SetField04(t)
	return tec
}

// SetNillableField04 sets the "field04" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableField04(t *table01forent.Field04) *Table01ForEntCreate {
	if t != nil {
		tec.SetField04(*t)
	}
	return tec
}

// SetField05 sets the "field05" field.
func (tec *Table01ForEntCreate) SetField05(s string) *Table01ForEntCreate {
	tec.mutation.SetField05(s)
	return tec
}

// SetNillableField05 sets the "field05" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableField05(s *string) *Table01ForEntCreate {
	if s != nil {
		tec.SetField05(*s)
	}
	return tec
}

// SetField06 sets the "field06" field.
func (tec *Table01ForEntCreate) SetField06(s string) *Table01ForEntCreate {
	tec.mutation.SetField06(s)
	return tec
}

// SetNillableField06 sets the "field06" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableField06(s *string) *Table01ForEntCreate {
	if s != nil {
		tec.SetField06(*s)
	}
	return tec
}

// SetField07 sets the "field07" field.
func (tec *Table01ForEntCreate) SetField07(i int64) *Table01ForEntCreate {
	tec.mutation.SetField07(i)
	return tec
}

// SetNillableField07 sets the "field07" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableField07(i *int64) *Table01ForEntCreate {
	if i != nil {
		tec.SetField07(*i)
	}
	return tec
}

// SetField08 sets the "field08" field.
func (tec *Table01ForEntCreate) SetField08(f float64) *Table01ForEntCreate {
	tec.mutation.SetField08(f)
	return tec
}

// SetNillableField08 sets the "field08" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableField08(f *float64) *Table01ForEntCreate {
	if f != nil {
		tec.SetField08(*f)
	}
	return tec
}

// SetField09 sets the "field09" field.
func (tec *Table01ForEntCreate) SetField09(s string) *Table01ForEntCreate {
	tec.mutation.SetField09(s)
	return tec
}

// SetNillableField09 sets the "field09" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableField09(s *string) *Table01ForEntCreate {
	if s != nil {
		tec.SetField09(*s)
	}
	return tec
}

// SetField10 sets the "field10" field.
func (tec *Table01ForEntCreate) SetField10(s string) *Table01ForEntCreate {
	tec.mutation.SetField10(s)
	return tec
}

// SetNillableField10 sets the "field10" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableField10(s *string) *Table01ForEntCreate {
	if s != nil {
		tec.SetField10(*s)
	}
	return tec
}

// SetField11 sets the "field11" field.
func (tec *Table01ForEntCreate) SetField11(s string) *Table01ForEntCreate {
	tec.mutation.SetField11(s)
	return tec
}

// SetNillableField11 sets the "field11" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableField11(s *string) *Table01ForEntCreate {
	if s != nil {
		tec.SetField11(*s)
	}
	return tec
}

// SetField12 sets the "field12" field.
func (tec *Table01ForEntCreate) SetField12(s string) *Table01ForEntCreate {
	tec.mutation.SetField12(s)
	return tec
}

// SetNillableField12 sets the "field12" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableField12(s *string) *Table01ForEntCreate {
	if s != nil {
		tec.SetField12(*s)
	}
	return tec
}

// SetField13 sets the "field13" field.
func (tec *Table01ForEntCreate) SetField13(s string) *Table01ForEntCreate {
	tec.mutation.SetField13(s)
	return tec
}

// SetNillableField13 sets the "field13" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableField13(s *string) *Table01ForEntCreate {
	if s != nil {
		tec.SetField13(*s)
	}
	return tec
}

// SetField14 sets the "field14" field.
func (tec *Table01ForEntCreate) SetField14(s string) *Table01ForEntCreate {
	tec.mutation.SetField14(s)
	return tec
}

// SetNillableField14 sets the "field14" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableField14(s *string) *Table01ForEntCreate {
	if s != nil {
		tec.SetField14(*s)
	}
	return tec
}

// SetField15 sets the "field15" field.
func (tec *Table01ForEntCreate) SetField15(s string) *Table01ForEntCreate {
	tec.mutation.SetField15(s)
	return tec
}

// SetNillableField15 sets the "field15" field if the given value is not nil.
func (tec *Table01ForEntCreate) SetNillableField15(s *string) *Table01ForEntCreate {
	if s != nil {
		tec.SetField15(*s)
	}
	return tec
}

// Mutation returns the Table01ForEntMutation object of the builder.
func (tec *Table01ForEntCreate) Mutation() *Table01ForEntMutation {
	return tec.mutation
}

// Save creates the Table01ForEnt in the database.
func (tec *Table01ForEntCreate) Save(ctx context.Context) (*Table01ForEnt, error) {
	tec.defaults()
	return withHooks(ctx, tec.sqlSave, tec.mutation, tec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tec *Table01ForEntCreate) SaveX(ctx context.Context) *Table01ForEnt {
	v, err := tec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tec *Table01ForEntCreate) Exec(ctx context.Context) error {
	_, err := tec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tec *Table01ForEntCreate) ExecX(ctx context.Context) {
	if err := tec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tec *Table01ForEntCreate) defaults() {
	if _, ok := tec.mutation.CreateTime(); !ok {
		v := table01forent.DefaultCreateTime()
		tec.mutation.SetCreateTime(v)
	}
	if _, ok := tec.mutation.UpdateTime(); !ok {
		v := table01forent.DefaultUpdateTime()
		tec.mutation.SetUpdateTime(v)
	}
	if _, ok := tec.mutation.Field03(); !ok {
		v := table01forent.DefaultField03
		tec.mutation.SetField03(v)
	}
	if _, ok := tec.mutation.Field04(); !ok {
		v := table01forent.DefaultField04
		tec.mutation.SetField04(v)
	}
	if _, ok := tec.mutation.Field07(); !ok {
		v := table01forent.DefaultField07()
		tec.mutation.SetField07(v)
	}
	if _, ok := tec.mutation.Field08(); !ok {
		v := table01forent.DefaultField08
		tec.mutation.SetField08(v)
	}
	if _, ok := tec.mutation.Field09(); !ok {
		v := table01forent.DefaultField09
		tec.mutation.SetField09(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tec *Table01ForEntCreate) check() error {
	if _, ok := tec.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Table01ForEnt.create_time"`)}
	}
	if _, ok := tec.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Table01ForEnt.update_time"`)}
	}
	if _, ok := tec.mutation.Field01(); !ok {
		return &ValidationError{Name: "field01", err: errors.New(`ent: missing required field "Table01ForEnt.field01"`)}
	}
	if _, ok := tec.mutation.Field02(); !ok {
		return &ValidationError{Name: "field02", err: errors.New(`ent: missing required field "Table01ForEnt.field02"`)}
	}
	if _, ok := tec.mutation.Field03(); !ok {
		return &ValidationError{Name: "field03", err: errors.New(`ent: missing required field "Table01ForEnt.field03"`)}
	}
	if _, ok := tec.mutation.Field04(); !ok {
		return &ValidationError{Name: "field04", err: errors.New(`ent: missing required field "Table01ForEnt.field04"`)}
	}
	if v, ok := tec.mutation.Field04(); ok {
		if err := table01forent.Field04Validator(v); err != nil {
			return &ValidationError{Name: "field04", err: fmt.Errorf(`ent: validator failed for field "Table01ForEnt.field04": %w`, err)}
		}
	}
	if _, ok := tec.mutation.Field07(); !ok {
		return &ValidationError{Name: "field07", err: errors.New(`ent: missing required field "Table01ForEnt.field07"`)}
	}
	if _, ok := tec.mutation.Field08(); !ok {
		return &ValidationError{Name: "field08", err: errors.New(`ent: missing required field "Table01ForEnt.field08"`)}
	}
	if _, ok := tec.mutation.Field09(); !ok {
		return &ValidationError{Name: "field09", err: errors.New(`ent: missing required field "Table01ForEnt.field09"`)}
	}
	if v, ok := tec.mutation.Field09(); ok {
		if err := table01forent.Field09Validator(v); err != nil {
			return &ValidationError{Name: "field09", err: fmt.Errorf(`ent: validator failed for field "Table01ForEnt.field09": %w`, err)}
		}
	}
	return nil
}

func (tec *Table01ForEntCreate) sqlSave(ctx context.Context) (*Table01ForEnt, error) {
	if err := tec.check(); err != nil {
		return nil, err
	}
	_node, _spec := tec.createSpec()
	if err := sqlgraph.CreateNode(ctx, tec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tec.mutation.id = &_node.ID
	tec.mutation.done = true
	return _node, nil
}

func (tec *Table01ForEntCreate) createSpec() (*Table01ForEnt, *sqlgraph.CreateSpec) {
	var (
		_node = &Table01ForEnt{config: tec.config}
		_spec = sqlgraph.NewCreateSpec(table01forent.Table, sqlgraph.NewFieldSpec(table01forent.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tec.conflict
	if value, ok := tec.mutation.CommonField01(); ok {
		_spec.SetField(table01forent.FieldCommonField01, field.TypeInt, value)
		_node.CommonField01 = value
	}
	if value, ok := tec.mutation.CreateTime(); ok {
		_spec.SetField(table01forent.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tec.mutation.UpdateTime(); ok {
		_spec.SetField(table01forent.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tec.mutation.Field01(); ok {
		_spec.SetField(table01forent.FieldField01, field.TypeString, value)
		_node.Field01 = value
	}
	if value, ok := tec.mutation.Field02(); ok {
		_spec.SetField(table01forent.FieldField02, field.TypeInt, value)
		_node.Field02 = value
	}
	if value, ok := tec.mutation.Field03(); ok {
		_spec.SetField(table01forent.FieldField03, field.TypeBool, value)
		_node.Field03 = value
	}
	if value, ok := tec.mutation.Field04(); ok {
		_spec.SetField(table01forent.FieldField04, field.TypeEnum, value)
		_node.Field04 = value
	}
	if value, ok := tec.mutation.Field05(); ok {
		_spec.SetField(table01forent.FieldField05, field.TypeString, value)
		_node.Field05 = value
	}
	if value, ok := tec.mutation.Field06(); ok {
		_spec.SetField(table01forent.FieldField06, field.TypeString, value)
		_node.Field06 = &value
	}
	if value, ok := tec.mutation.Field07(); ok {
		_spec.SetField(table01forent.FieldField07, field.TypeInt64, value)
		_node.Field07 = value
	}
	if value, ok := tec.mutation.Field08(); ok {
		_spec.SetField(table01forent.FieldField08, field.TypeFloat64, value)
		_node.Field08 = value
	}
	if value, ok := tec.mutation.Field09(); ok {
		_spec.SetField(table01forent.FieldField09, field.TypeString, value)
		_node.Field09 = value
	}
	if value, ok := tec.mutation.Field10(); ok {
		_spec.SetField(table01forent.FieldField10, field.TypeString, value)
		_node.Field10 = value
	}
	if value, ok := tec.mutation.Field11(); ok {
		_spec.SetField(table01forent.FieldField11, field.TypeString, value)
		_node.Field11 = value
	}
	if value, ok := tec.mutation.Field12(); ok {
		_spec.SetField(table01forent.FieldField12, field.TypeString, value)
		_node.Field12 = value
	}
	if value, ok := tec.mutation.Field13(); ok {
		_spec.SetField(table01forent.FieldField13, field.TypeString, value)
		_node.Field13 = value
	}
	if value, ok := tec.mutation.Field14(); ok {
		_spec.SetField(table01forent.FieldField14, field.TypeString, value)
		_node.Field14 = value
	}
	if value, ok := tec.mutation.Field15(); ok {
		_spec.SetField(table01forent.FieldField15, field.TypeString, value)
		_node.Field15 = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Table01ForEnt.Create().
//		SetCommonField01(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Table01ForEntUpsert) {
//			SetCommonField01(v+v).
//		}).
//		Exec(ctx)
func (tec *Table01ForEntCreate) OnConflict(opts ...sql.ConflictOption) *Table01ForEntUpsertOne {
	tec.conflict = opts
	return &Table01ForEntUpsertOne{
		create: tec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Table01ForEnt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tec *Table01ForEntCreate) OnConflictColumns(columns ...string) *Table01ForEntUpsertOne {
	tec.conflict = append(tec.conflict, sql.ConflictColumns(columns...))
	return &Table01ForEntUpsertOne{
		create: tec,
	}
}

type (
	// Table01ForEntUpsertOne is the builder for "upsert"-ing
	//  one Table01ForEnt node.
	Table01ForEntUpsertOne struct {
		create *Table01ForEntCreate
	}

	// Table01ForEntUpsert is the "OnConflict" setter.
	Table01ForEntUpsert struct {
		*sql.UpdateSet
	}
)

// SetCommonField01 sets the "common_field01" field.
func (u *Table01ForEntUpsert) SetCommonField01(v int) *Table01ForEntUpsert {
	u.Set(table01forent.FieldCommonField01, v)
	return u
}

// UpdateCommonField01 sets the "common_field01" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateCommonField01() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldCommonField01)
	return u
}

// AddCommonField01 adds v to the "common_field01" field.
func (u *Table01ForEntUpsert) AddCommonField01(v int) *Table01ForEntUpsert {
	u.Add(table01forent.FieldCommonField01, v)
	return u
}

// ClearCommonField01 clears the value of the "common_field01" field.
func (u *Table01ForEntUpsert) ClearCommonField01() *Table01ForEntUpsert {
	u.SetNull(table01forent.FieldCommonField01)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *Table01ForEntUpsert) SetUpdateTime(v time.Time) *Table01ForEntUpsert {
	u.Set(table01forent.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateUpdateTime() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldUpdateTime)
	return u
}

// SetField01 sets the "field01" field.
func (u *Table01ForEntUpsert) SetField01(v string) *Table01ForEntUpsert {
	u.Set(table01forent.FieldField01, v)
	return u
}

// UpdateField01 sets the "field01" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateField01() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldField01)
	return u
}

// SetField02 sets the "field02" field.
func (u *Table01ForEntUpsert) SetField02(v int) *Table01ForEntUpsert {
	u.Set(table01forent.FieldField02, v)
	return u
}

// UpdateField02 sets the "field02" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateField02() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldField02)
	return u
}

// AddField02 adds v to the "field02" field.
func (u *Table01ForEntUpsert) AddField02(v int) *Table01ForEntUpsert {
	u.Add(table01forent.FieldField02, v)
	return u
}

// SetField03 sets the "field03" field.
func (u *Table01ForEntUpsert) SetField03(v bool) *Table01ForEntUpsert {
	u.Set(table01forent.FieldField03, v)
	return u
}

// UpdateField03 sets the "field03" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateField03() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldField03)
	return u
}

// SetField04 sets the "field04" field.
func (u *Table01ForEntUpsert) SetField04(v table01forent.Field04) *Table01ForEntUpsert {
	u.Set(table01forent.FieldField04, v)
	return u
}

// UpdateField04 sets the "field04" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateField04() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldField04)
	return u
}

// SetField05 sets the "field05" field.
func (u *Table01ForEntUpsert) SetField05(v string) *Table01ForEntUpsert {
	u.Set(table01forent.FieldField05, v)
	return u
}

// UpdateField05 sets the "field05" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateField05() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldField05)
	return u
}

// ClearField05 clears the value of the "field05" field.
func (u *Table01ForEntUpsert) ClearField05() *Table01ForEntUpsert {
	u.SetNull(table01forent.FieldField05)
	return u
}

// SetField06 sets the "field06" field.
func (u *Table01ForEntUpsert) SetField06(v string) *Table01ForEntUpsert {
	u.Set(table01forent.FieldField06, v)
	return u
}

// UpdateField06 sets the "field06" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateField06() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldField06)
	return u
}

// ClearField06 clears the value of the "field06" field.
func (u *Table01ForEntUpsert) ClearField06() *Table01ForEntUpsert {
	u.SetNull(table01forent.FieldField06)
	return u
}

// SetField07 sets the "field07" field.
func (u *Table01ForEntUpsert) SetField07(v int64) *Table01ForEntUpsert {
	u.Set(table01forent.FieldField07, v)
	return u
}

// UpdateField07 sets the "field07" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateField07() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldField07)
	return u
}

// AddField07 adds v to the "field07" field.
func (u *Table01ForEntUpsert) AddField07(v int64) *Table01ForEntUpsert {
	u.Add(table01forent.FieldField07, v)
	return u
}

// SetField08 sets the "field08" field.
func (u *Table01ForEntUpsert) SetField08(v float64) *Table01ForEntUpsert {
	u.Set(table01forent.FieldField08, v)
	return u
}

// UpdateField08 sets the "field08" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateField08() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldField08)
	return u
}

// AddField08 adds v to the "field08" field.
func (u *Table01ForEntUpsert) AddField08(v float64) *Table01ForEntUpsert {
	u.Add(table01forent.FieldField08, v)
	return u
}

// SetField09 sets the "field09" field.
func (u *Table01ForEntUpsert) SetField09(v string) *Table01ForEntUpsert {
	u.Set(table01forent.FieldField09, v)
	return u
}

// UpdateField09 sets the "field09" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateField09() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldField09)
	return u
}

// SetField10 sets the "field10" field.
func (u *Table01ForEntUpsert) SetField10(v string) *Table01ForEntUpsert {
	u.Set(table01forent.FieldField10, v)
	return u
}

// UpdateField10 sets the "field10" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateField10() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldField10)
	return u
}

// ClearField10 clears the value of the "field10" field.
func (u *Table01ForEntUpsert) ClearField10() *Table01ForEntUpsert {
	u.SetNull(table01forent.FieldField10)
	return u
}

// SetField11 sets the "field11" field.
func (u *Table01ForEntUpsert) SetField11(v string) *Table01ForEntUpsert {
	u.Set(table01forent.FieldField11, v)
	return u
}

// UpdateField11 sets the "field11" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateField11() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldField11)
	return u
}

// ClearField11 clears the value of the "field11" field.
func (u *Table01ForEntUpsert) ClearField11() *Table01ForEntUpsert {
	u.SetNull(table01forent.FieldField11)
	return u
}

// SetField12 sets the "field12" field.
func (u *Table01ForEntUpsert) SetField12(v string) *Table01ForEntUpsert {
	u.Set(table01forent.FieldField12, v)
	return u
}

// UpdateField12 sets the "field12" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateField12() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldField12)
	return u
}

// ClearField12 clears the value of the "field12" field.
func (u *Table01ForEntUpsert) ClearField12() *Table01ForEntUpsert {
	u.SetNull(table01forent.FieldField12)
	return u
}

// SetField13 sets the "field13" field.
func (u *Table01ForEntUpsert) SetField13(v string) *Table01ForEntUpsert {
	u.Set(table01forent.FieldField13, v)
	return u
}

// UpdateField13 sets the "field13" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateField13() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldField13)
	return u
}

// ClearField13 clears the value of the "field13" field.
func (u *Table01ForEntUpsert) ClearField13() *Table01ForEntUpsert {
	u.SetNull(table01forent.FieldField13)
	return u
}

// SetField14 sets the "field14" field.
func (u *Table01ForEntUpsert) SetField14(v string) *Table01ForEntUpsert {
	u.Set(table01forent.FieldField14, v)
	return u
}

// UpdateField14 sets the "field14" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateField14() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldField14)
	return u
}

// ClearField14 clears the value of the "field14" field.
func (u *Table01ForEntUpsert) ClearField14() *Table01ForEntUpsert {
	u.SetNull(table01forent.FieldField14)
	return u
}

// SetField15 sets the "field15" field.
func (u *Table01ForEntUpsert) SetField15(v string) *Table01ForEntUpsert {
	u.Set(table01forent.FieldField15, v)
	return u
}

// UpdateField15 sets the "field15" field to the value that was provided on create.
func (u *Table01ForEntUpsert) UpdateField15() *Table01ForEntUpsert {
	u.SetExcluded(table01forent.FieldField15)
	return u
}

// ClearField15 clears the value of the "field15" field.
func (u *Table01ForEntUpsert) ClearField15() *Table01ForEntUpsert {
	u.SetNull(table01forent.FieldField15)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Table01ForEnt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Table01ForEntUpsertOne) UpdateNewValues() *Table01ForEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(table01forent.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Table01ForEnt.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *Table01ForEntUpsertOne) Ignore() *Table01ForEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Table01ForEntUpsertOne) DoNothing() *Table01ForEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the Table01ForEntCreate.OnConflict
// documentation for more info.
func (u *Table01ForEntUpsertOne) Update(set func(*Table01ForEntUpsert)) *Table01ForEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Table01ForEntUpsert{UpdateSet: update})
	}))
	return u
}

// SetCommonField01 sets the "common_field01" field.
func (u *Table01ForEntUpsertOne) SetCommonField01(v int) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetCommonField01(v)
	})
}

// AddCommonField01 adds v to the "common_field01" field.
func (u *Table01ForEntUpsertOne) AddCommonField01(v int) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.AddCommonField01(v)
	})
}

// UpdateCommonField01 sets the "common_field01" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateCommonField01() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateCommonField01()
	})
}

// ClearCommonField01 clears the value of the "common_field01" field.
func (u *Table01ForEntUpsertOne) ClearCommonField01() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearCommonField01()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *Table01ForEntUpsertOne) SetUpdateTime(v time.Time) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateUpdateTime() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetField01 sets the "field01" field.
func (u *Table01ForEntUpsertOne) SetField01(v string) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField01(v)
	})
}

// UpdateField01 sets the "field01" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateField01() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField01()
	})
}

// SetField02 sets the "field02" field.
func (u *Table01ForEntUpsertOne) SetField02(v int) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField02(v)
	})
}

// AddField02 adds v to the "field02" field.
func (u *Table01ForEntUpsertOne) AddField02(v int) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.AddField02(v)
	})
}

// UpdateField02 sets the "field02" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateField02() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField02()
	})
}

// SetField03 sets the "field03" field.
func (u *Table01ForEntUpsertOne) SetField03(v bool) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField03(v)
	})
}

// UpdateField03 sets the "field03" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateField03() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField03()
	})
}

// SetField04 sets the "field04" field.
func (u *Table01ForEntUpsertOne) SetField04(v table01forent.Field04) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField04(v)
	})
}

// UpdateField04 sets the "field04" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateField04() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField04()
	})
}

// SetField05 sets the "field05" field.
func (u *Table01ForEntUpsertOne) SetField05(v string) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField05(v)
	})
}

// UpdateField05 sets the "field05" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateField05() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField05()
	})
}

// ClearField05 clears the value of the "field05" field.
func (u *Table01ForEntUpsertOne) ClearField05() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField05()
	})
}

// SetField06 sets the "field06" field.
func (u *Table01ForEntUpsertOne) SetField06(v string) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField06(v)
	})
}

// UpdateField06 sets the "field06" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateField06() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField06()
	})
}

// ClearField06 clears the value of the "field06" field.
func (u *Table01ForEntUpsertOne) ClearField06() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField06()
	})
}

// SetField07 sets the "field07" field.
func (u *Table01ForEntUpsertOne) SetField07(v int64) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField07(v)
	})
}

// AddField07 adds v to the "field07" field.
func (u *Table01ForEntUpsertOne) AddField07(v int64) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.AddField07(v)
	})
}

// UpdateField07 sets the "field07" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateField07() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField07()
	})
}

// SetField08 sets the "field08" field.
func (u *Table01ForEntUpsertOne) SetField08(v float64) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField08(v)
	})
}

// AddField08 adds v to the "field08" field.
func (u *Table01ForEntUpsertOne) AddField08(v float64) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.AddField08(v)
	})
}

// UpdateField08 sets the "field08" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateField08() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField08()
	})
}

// SetField09 sets the "field09" field.
func (u *Table01ForEntUpsertOne) SetField09(v string) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField09(v)
	})
}

// UpdateField09 sets the "field09" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateField09() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField09()
	})
}

// SetField10 sets the "field10" field.
func (u *Table01ForEntUpsertOne) SetField10(v string) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField10(v)
	})
}

// UpdateField10 sets the "field10" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateField10() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField10()
	})
}

// ClearField10 clears the value of the "field10" field.
func (u *Table01ForEntUpsertOne) ClearField10() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField10()
	})
}

// SetField11 sets the "field11" field.
func (u *Table01ForEntUpsertOne) SetField11(v string) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField11(v)
	})
}

// UpdateField11 sets the "field11" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateField11() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField11()
	})
}

// ClearField11 clears the value of the "field11" field.
func (u *Table01ForEntUpsertOne) ClearField11() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField11()
	})
}

// SetField12 sets the "field12" field.
func (u *Table01ForEntUpsertOne) SetField12(v string) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField12(v)
	})
}

// UpdateField12 sets the "field12" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateField12() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField12()
	})
}

// ClearField12 clears the value of the "field12" field.
func (u *Table01ForEntUpsertOne) ClearField12() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField12()
	})
}

// SetField13 sets the "field13" field.
func (u *Table01ForEntUpsertOne) SetField13(v string) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField13(v)
	})
}

// UpdateField13 sets the "field13" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateField13() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField13()
	})
}

// ClearField13 clears the value of the "field13" field.
func (u *Table01ForEntUpsertOne) ClearField13() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField13()
	})
}

// SetField14 sets the "field14" field.
func (u *Table01ForEntUpsertOne) SetField14(v string) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField14(v)
	})
}

// UpdateField14 sets the "field14" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateField14() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField14()
	})
}

// ClearField14 clears the value of the "field14" field.
func (u *Table01ForEntUpsertOne) ClearField14() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField14()
	})
}

// SetField15 sets the "field15" field.
func (u *Table01ForEntUpsertOne) SetField15(v string) *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField15(v)
	})
}

// UpdateField15 sets the "field15" field to the value that was provided on create.
func (u *Table01ForEntUpsertOne) UpdateField15() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField15()
	})
}

// ClearField15 clears the value of the "field15" field.
func (u *Table01ForEntUpsertOne) ClearField15() *Table01ForEntUpsertOne {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField15()
	})
}

// Exec executes the query.
func (u *Table01ForEntUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for Table01ForEntCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Table01ForEntUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *Table01ForEntUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *Table01ForEntUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// Table01ForEntCreateBulk is the builder for creating many Table01ForEnt entities in bulk.
type Table01ForEntCreateBulk struct {
	config
	err      error
	builders []*Table01ForEntCreate
	conflict []sql.ConflictOption
}

// Save creates the Table01ForEnt entities in the database.
func (tecb *Table01ForEntCreateBulk) Save(ctx context.Context) ([]*Table01ForEnt, error) {
	if tecb.err != nil {
		return nil, tecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tecb.builders))
	nodes := make([]*Table01ForEnt, len(tecb.builders))
	mutators := make([]Mutator, len(tecb.builders))
	for i := range tecb.builders {
		func(i int, root context.Context) {
			builder := tecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*Table01ForEntMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tecb *Table01ForEntCreateBulk) SaveX(ctx context.Context) []*Table01ForEnt {
	v, err := tecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tecb *Table01ForEntCreateBulk) Exec(ctx context.Context) error {
	_, err := tecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tecb *Table01ForEntCreateBulk) ExecX(ctx context.Context) {
	if err := tecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Table01ForEnt.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Table01ForEntUpsert) {
//			SetCommonField01(v+v).
//		}).
//		Exec(ctx)
func (tecb *Table01ForEntCreateBulk) OnConflict(opts ...sql.ConflictOption) *Table01ForEntUpsertBulk {
	tecb.conflict = opts
	return &Table01ForEntUpsertBulk{
		create: tecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Table01ForEnt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tecb *Table01ForEntCreateBulk) OnConflictColumns(columns ...string) *Table01ForEntUpsertBulk {
	tecb.conflict = append(tecb.conflict, sql.ConflictColumns(columns...))
	return &Table01ForEntUpsertBulk{
		create: tecb,
	}
}

// Table01ForEntUpsertBulk is the builder for "upsert"-ing
// a bulk of Table01ForEnt nodes.
type Table01ForEntUpsertBulk struct {
	create *Table01ForEntCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Table01ForEnt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Table01ForEntUpsertBulk) UpdateNewValues() *Table01ForEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(table01forent.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Table01ForEnt.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *Table01ForEntUpsertBulk) Ignore() *Table01ForEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Table01ForEntUpsertBulk) DoNothing() *Table01ForEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the Table01ForEntCreateBulk.OnConflict
// documentation for more info.
func (u *Table01ForEntUpsertBulk) Update(set func(*Table01ForEntUpsert)) *Table01ForEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Table01ForEntUpsert{UpdateSet: update})
	}))
	return u
}

// SetCommonField01 sets the "common_field01" field.
func (u *Table01ForEntUpsertBulk) SetCommonField01(v int) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetCommonField01(v)
	})
}

// AddCommonField01 adds v to the "common_field01" field.
func (u *Table01ForEntUpsertBulk) AddCommonField01(v int) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.AddCommonField01(v)
	})
}

// UpdateCommonField01 sets the "common_field01" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateCommonField01() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateCommonField01()
	})
}

// ClearCommonField01 clears the value of the "common_field01" field.
func (u *Table01ForEntUpsertBulk) ClearCommonField01() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearCommonField01()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *Table01ForEntUpsertBulk) SetUpdateTime(v time.Time) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateUpdateTime() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetField01 sets the "field01" field.
func (u *Table01ForEntUpsertBulk) SetField01(v string) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField01(v)
	})
}

// UpdateField01 sets the "field01" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateField01() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField01()
	})
}

// SetField02 sets the "field02" field.
func (u *Table01ForEntUpsertBulk) SetField02(v int) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField02(v)
	})
}

// AddField02 adds v to the "field02" field.
func (u *Table01ForEntUpsertBulk) AddField02(v int) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.AddField02(v)
	})
}

// UpdateField02 sets the "field02" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateField02() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField02()
	})
}

// SetField03 sets the "field03" field.
func (u *Table01ForEntUpsertBulk) SetField03(v bool) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField03(v)
	})
}

// UpdateField03 sets the "field03" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateField03() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField03()
	})
}

// SetField04 sets the "field04" field.
func (u *Table01ForEntUpsertBulk) SetField04(v table01forent.Field04) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField04(v)
	})
}

// UpdateField04 sets the "field04" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateField04() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField04()
	})
}

// SetField05 sets the "field05" field.
func (u *Table01ForEntUpsertBulk) SetField05(v string) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField05(v)
	})
}

// UpdateField05 sets the "field05" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateField05() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField05()
	})
}

// ClearField05 clears the value of the "field05" field.
func (u *Table01ForEntUpsertBulk) ClearField05() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField05()
	})
}

// SetField06 sets the "field06" field.
func (u *Table01ForEntUpsertBulk) SetField06(v string) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField06(v)
	})
}

// UpdateField06 sets the "field06" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateField06() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField06()
	})
}

// ClearField06 clears the value of the "field06" field.
func (u *Table01ForEntUpsertBulk) ClearField06() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField06()
	})
}

// SetField07 sets the "field07" field.
func (u *Table01ForEntUpsertBulk) SetField07(v int64) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField07(v)
	})
}

// AddField07 adds v to the "field07" field.
func (u *Table01ForEntUpsertBulk) AddField07(v int64) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.AddField07(v)
	})
}

// UpdateField07 sets the "field07" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateField07() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField07()
	})
}

// SetField08 sets the "field08" field.
func (u *Table01ForEntUpsertBulk) SetField08(v float64) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField08(v)
	})
}

// AddField08 adds v to the "field08" field.
func (u *Table01ForEntUpsertBulk) AddField08(v float64) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.AddField08(v)
	})
}

// UpdateField08 sets the "field08" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateField08() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField08()
	})
}

// SetField09 sets the "field09" field.
func (u *Table01ForEntUpsertBulk) SetField09(v string) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField09(v)
	})
}

// UpdateField09 sets the "field09" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateField09() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField09()
	})
}

// SetField10 sets the "field10" field.
func (u *Table01ForEntUpsertBulk) SetField10(v string) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField10(v)
	})
}

// UpdateField10 sets the "field10" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateField10() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField10()
	})
}

// ClearField10 clears the value of the "field10" field.
func (u *Table01ForEntUpsertBulk) ClearField10() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField10()
	})
}

// SetField11 sets the "field11" field.
func (u *Table01ForEntUpsertBulk) SetField11(v string) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField11(v)
	})
}

// UpdateField11 sets the "field11" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateField11() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField11()
	})
}

// ClearField11 clears the value of the "field11" field.
func (u *Table01ForEntUpsertBulk) ClearField11() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField11()
	})
}

// SetField12 sets the "field12" field.
func (u *Table01ForEntUpsertBulk) SetField12(v string) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField12(v)
	})
}

// UpdateField12 sets the "field12" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateField12() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField12()
	})
}

// ClearField12 clears the value of the "field12" field.
func (u *Table01ForEntUpsertBulk) ClearField12() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField12()
	})
}

// SetField13 sets the "field13" field.
func (u *Table01ForEntUpsertBulk) SetField13(v string) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField13(v)
	})
}

// UpdateField13 sets the "field13" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateField13() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField13()
	})
}

// ClearField13 clears the value of the "field13" field.
func (u *Table01ForEntUpsertBulk) ClearField13() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField13()
	})
}

// SetField14 sets the "field14" field.
func (u *Table01ForEntUpsertBulk) SetField14(v string) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField14(v)
	})
}

// UpdateField14 sets the "field14" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateField14() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField14()
	})
}

// ClearField14 clears the value of the "field14" field.
func (u *Table01ForEntUpsertBulk) ClearField14() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField14()
	})
}

// SetField15 sets the "field15" field.
func (u *Table01ForEntUpsertBulk) SetField15(v string) *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.SetField15(v)
	})
}

// UpdateField15 sets the "field15" field to the value that was provided on create.
func (u *Table01ForEntUpsertBulk) UpdateField15() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.UpdateField15()
	})
}

// ClearField15 clears the value of the "field15" field.
func (u *Table01ForEntUpsertBulk) ClearField15() *Table01ForEntUpsertBulk {
	return u.Update(func(s *Table01ForEntUpsert) {
		s.ClearField15()
	})
}

// Exec executes the query.
func (u *Table01ForEntUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the Table01ForEntCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for Table01ForEntCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Table01ForEntUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
