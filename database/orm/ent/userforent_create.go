// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/common-library/go/database/orm/ent/repositoryforent"
	"github.com/common-library/go/database/orm/ent/userforent"
)

// UserForEntCreate is the builder for creating a UserForEnt entity.
type UserForEntCreate struct {
	config
	mutation *UserForEntMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// AddRepositoryForEntIDs adds the "repository_for_ents" edge to the RepositoryForEnt entity by IDs.
func (ufec *UserForEntCreate) AddRepositoryForEntIDs(ids ...int) *UserForEntCreate {
	ufec.mutation.AddRepositoryForEntIDs(ids...)
	return ufec
}

// AddRepositoryForEnts adds the "repository_for_ents" edges to the RepositoryForEnt entity.
func (ufec *UserForEntCreate) AddRepositoryForEnts(r ...*RepositoryForEnt) *UserForEntCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ufec.AddRepositoryForEntIDs(ids...)
}

// Mutation returns the UserForEntMutation object of the builder.
func (ufec *UserForEntCreate) Mutation() *UserForEntMutation {
	return ufec.mutation
}

// Save creates the UserForEnt in the database.
func (ufec *UserForEntCreate) Save(ctx context.Context) (*UserForEnt, error) {
	return withHooks(ctx, ufec.sqlSave, ufec.mutation, ufec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ufec *UserForEntCreate) SaveX(ctx context.Context) *UserForEnt {
	v, err := ufec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufec *UserForEntCreate) Exec(ctx context.Context) error {
	_, err := ufec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufec *UserForEntCreate) ExecX(ctx context.Context) {
	if err := ufec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufec *UserForEntCreate) check() error {
	return nil
}

func (ufec *UserForEntCreate) sqlSave(ctx context.Context) (*UserForEnt, error) {
	if err := ufec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ufec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ufec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ufec.mutation.id = &_node.ID
	ufec.mutation.done = true
	return _node, nil
}

func (ufec *UserForEntCreate) createSpec() (*UserForEnt, *sqlgraph.CreateSpec) {
	var (
		_node = &UserForEnt{config: ufec.config}
		_spec = sqlgraph.NewCreateSpec(userforent.Table, sqlgraph.NewFieldSpec(userforent.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ufec.conflict
	if nodes := ufec.mutation.RepositoryForEntsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userforent.RepositoryForEntsTable,
			Columns: userforent.RepositoryForEntsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repositoryforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserForEnt.Create().
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (ufec *UserForEntCreate) OnConflict(opts ...sql.ConflictOption) *UserForEntUpsertOne {
	ufec.conflict = opts
	return &UserForEntUpsertOne{
		create: ufec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserForEnt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ufec *UserForEntCreate) OnConflictColumns(columns ...string) *UserForEntUpsertOne {
	ufec.conflict = append(ufec.conflict, sql.ConflictColumns(columns...))
	return &UserForEntUpsertOne{
		create: ufec,
	}
}

type (
	// UserForEntUpsertOne is the builder for "upsert"-ing
	//  one UserForEnt node.
	UserForEntUpsertOne struct {
		create *UserForEntCreate
	}

	// UserForEntUpsert is the "OnConflict" setter.
	UserForEntUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserForEnt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserForEntUpsertOne) UpdateNewValues() *UserForEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserForEnt.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserForEntUpsertOne) Ignore() *UserForEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserForEntUpsertOne) DoNothing() *UserForEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserForEntCreate.OnConflict
// documentation for more info.
func (u *UserForEntUpsertOne) Update(set func(*UserForEntUpsert)) *UserForEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserForEntUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *UserForEntUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserForEntCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserForEntUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserForEntUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserForEntUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserForEntCreateBulk is the builder for creating many UserForEnt entities in bulk.
type UserForEntCreateBulk struct {
	config
	err      error
	builders []*UserForEntCreate
	conflict []sql.ConflictOption
}

// Save creates the UserForEnt entities in the database.
func (ufecb *UserForEntCreateBulk) Save(ctx context.Context) ([]*UserForEnt, error) {
	if ufecb.err != nil {
		return nil, ufecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ufecb.builders))
	nodes := make([]*UserForEnt, len(ufecb.builders))
	mutators := make([]Mutator, len(ufecb.builders))
	for i := range ufecb.builders {
		func(i int, root context.Context) {
			builder := ufecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserForEntMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ufecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ufecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ufecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ufecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ufecb *UserForEntCreateBulk) SaveX(ctx context.Context) []*UserForEnt {
	v, err := ufecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufecb *UserForEntCreateBulk) Exec(ctx context.Context) error {
	_, err := ufecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufecb *UserForEntCreateBulk) ExecX(ctx context.Context) {
	if err := ufecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserForEnt.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (ufecb *UserForEntCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserForEntUpsertBulk {
	ufecb.conflict = opts
	return &UserForEntUpsertBulk{
		create: ufecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserForEnt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ufecb *UserForEntCreateBulk) OnConflictColumns(columns ...string) *UserForEntUpsertBulk {
	ufecb.conflict = append(ufecb.conflict, sql.ConflictColumns(columns...))
	return &UserForEntUpsertBulk{
		create: ufecb,
	}
}

// UserForEntUpsertBulk is the builder for "upsert"-ing
// a bulk of UserForEnt nodes.
type UserForEntUpsertBulk struct {
	create *UserForEntCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserForEnt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserForEntUpsertBulk) UpdateNewValues() *UserForEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserForEnt.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserForEntUpsertBulk) Ignore() *UserForEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserForEntUpsertBulk) DoNothing() *UserForEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserForEntCreateBulk.OnConflict
// documentation for more info.
func (u *UserForEntUpsertBulk) Update(set func(*UserForEntUpsert)) *UserForEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserForEntUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *UserForEntUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserForEntCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserForEntCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserForEntUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
