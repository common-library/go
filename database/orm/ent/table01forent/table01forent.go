// Code generated by ent, DO NOT EDIT.

package table01forent

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the table01forent type in the database.
	Label = "table01for_ent"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCommonField01 holds the string denoting the common_field01 field in the database.
	FieldCommonField01 = "common_field01"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldField01 holds the string denoting the field01 field in the database.
	FieldField01 = "field01"
	// FieldField02 holds the string denoting the field02 field in the database.
	FieldField02 = "field02"
	// FieldField03 holds the string denoting the field03 field in the database.
	FieldField03 = "field03"
	// FieldField04 holds the string denoting the field04 field in the database.
	FieldField04 = "field04"
	// FieldField05 holds the string denoting the field05 field in the database.
	FieldField05 = "field05"
	// FieldField06 holds the string denoting the field06 field in the database.
	FieldField06 = "field06"
	// FieldField07 holds the string denoting the field07 field in the database.
	FieldField07 = "field07"
	// FieldField08 holds the string denoting the field08 field in the database.
	FieldField08 = "field08"
	// FieldField09 holds the string denoting the field09 field in the database.
	FieldField09 = "field09"
	// FieldField10 holds the string denoting the field10 field in the database.
	FieldField10 = "field10"
	// FieldField11 holds the string denoting the field11 field in the database.
	FieldField11 = "field11"
	// FieldField12 holds the string denoting the field12 field in the database.
	FieldField12 = "field12"
	// FieldField13 holds the string denoting the field13 field in the database.
	FieldField13 = "field13"
	// FieldField14 holds the string denoting the field14 field in the database.
	FieldField14 = "storage_key"
	// FieldField15 holds the string denoting the field15 field in the database.
	FieldField15 = "field15"
	// Table holds the table name of the table01forent in the database.
	Table = "table01for_ents"
)

// Columns holds all SQL columns for table01forent fields.
var Columns = []string{
	FieldID,
	FieldCommonField01,
	FieldCreateTime,
	FieldUpdateTime,
	FieldField01,
	FieldField02,
	FieldField03,
	FieldField04,
	FieldField05,
	FieldField06,
	FieldField07,
	FieldField08,
	FieldField09,
	FieldField10,
	FieldField11,
	FieldField12,
	FieldField14,
	FieldField15,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for _, f := range [...]string{FieldField13} {
		if column == f {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultField03 holds the default value on creation for the "field03" field.
	DefaultField03 bool
	// DefaultField07 holds the default value on creation for the "field07" field.
	DefaultField07 func() int64
	// UpdateDefaultField07 holds the default value on update for the "field07" field.
	UpdateDefaultField07 func() int64
	// DefaultField08 holds the default value on creation for the "field08" field.
	DefaultField08 float64
	// DefaultField09 holds the default value on creation for the "field09" field.
	DefaultField09 string
	// Field09Validator is a validator for the "field09" field. It is called by the builders before save.
	Field09Validator func(string) error
)

// Field04 defines the type for the "field04" enum field.
type Field04 string

// Field04Value01 is the default value of the Field04 enum.
const DefaultField04 = Field04Value01

// Field04 values.
const (
	Field04Value01 Field04 = "value01"
	Field04Value02 Field04 = "value02"
)

func (f Field04) String() string {
	return string(f)
}

// Field04Validator is a validator for the "field04" field enum values. It is called by the builders before save.
func Field04Validator(f Field04) error {
	switch f {
	case Field04Value01, Field04Value02:
		return nil
	default:
		return fmt.Errorf("table01forent: invalid enum value for field04 field: %q", f)
	}
}

// OrderOption defines the ordering options for the Table01ForEnt queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCommonField01 orders the results by the common_field01 field.
func ByCommonField01(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommonField01, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByField01 orders the results by the field01 field.
func ByField01(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField01, opts...).ToFunc()
}

// ByField02 orders the results by the field02 field.
func ByField02(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField02, opts...).ToFunc()
}

// ByField03 orders the results by the field03 field.
func ByField03(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField03, opts...).ToFunc()
}

// ByField04 orders the results by the field04 field.
func ByField04(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField04, opts...).ToFunc()
}

// ByField05 orders the results by the field05 field.
func ByField05(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField05, opts...).ToFunc()
}

// ByField06 orders the results by the field06 field.
func ByField06(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField06, opts...).ToFunc()
}

// ByField07 orders the results by the field07 field.
func ByField07(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField07, opts...).ToFunc()
}

// ByField08 orders the results by the field08 field.
func ByField08(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField08, opts...).ToFunc()
}

// ByField09 orders the results by the field09 field.
func ByField09(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField09, opts...).ToFunc()
}

// ByField10 orders the results by the field10 field.
func ByField10(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField10, opts...).ToFunc()
}

// ByField11 orders the results by the field11 field.
func ByField11(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField11, opts...).ToFunc()
}

// ByField12 orders the results by the field12 field.
func ByField12(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField12, opts...).ToFunc()
}

// ByField13 orders the results by the field13 field.
func ByField13(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField13, opts...).ToFunc()
}

// ByField14 orders the results by the field14 field.
func ByField14(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField14, opts...).ToFunc()
}

// ByField15 orders the results by the field15 field.
func ByField15(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField15, opts...).ToFunc()
}
