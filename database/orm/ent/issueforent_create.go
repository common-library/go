// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/common-library/go/database/orm/ent/issueforent"
	"github.com/common-library/go/database/orm/ent/repositoryforent"
)

// IssueForEntCreate is the builder for creating a IssueForEnt entity.
type IssueForEntCreate struct {
	config
	mutation *IssueForEntMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRepositoryID sets the "repository" edge to the RepositoryForEnt entity by ID.
func (ifec *IssueForEntCreate) SetRepositoryID(id int) *IssueForEntCreate {
	ifec.mutation.SetRepositoryID(id)
	return ifec
}

// SetNillableRepositoryID sets the "repository" edge to the RepositoryForEnt entity by ID if the given value is not nil.
func (ifec *IssueForEntCreate) SetNillableRepositoryID(id *int) *IssueForEntCreate {
	if id != nil {
		ifec = ifec.SetRepositoryID(*id)
	}
	return ifec
}

// SetRepository sets the "repository" edge to the RepositoryForEnt entity.
func (ifec *IssueForEntCreate) SetRepository(r *RepositoryForEnt) *IssueForEntCreate {
	return ifec.SetRepositoryID(r.ID)
}

// Mutation returns the IssueForEntMutation object of the builder.
func (ifec *IssueForEntCreate) Mutation() *IssueForEntMutation {
	return ifec.mutation
}

// Save creates the IssueForEnt in the database.
func (ifec *IssueForEntCreate) Save(ctx context.Context) (*IssueForEnt, error) {
	return withHooks(ctx, ifec.sqlSave, ifec.mutation, ifec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ifec *IssueForEntCreate) SaveX(ctx context.Context) *IssueForEnt {
	v, err := ifec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ifec *IssueForEntCreate) Exec(ctx context.Context) error {
	_, err := ifec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifec *IssueForEntCreate) ExecX(ctx context.Context) {
	if err := ifec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ifec *IssueForEntCreate) check() error {
	return nil
}

func (ifec *IssueForEntCreate) sqlSave(ctx context.Context) (*IssueForEnt, error) {
	if err := ifec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ifec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ifec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ifec.mutation.id = &_node.ID
	ifec.mutation.done = true
	return _node, nil
}

func (ifec *IssueForEntCreate) createSpec() (*IssueForEnt, *sqlgraph.CreateSpec) {
	var (
		_node = &IssueForEnt{config: ifec.config}
		_spec = sqlgraph.NewCreateSpec(issueforent.Table, sqlgraph.NewFieldSpec(issueforent.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ifec.conflict
	if nodes := ifec.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issueforent.RepositoryTable,
			Columns: []string{issueforent.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repositoryforent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_for_ent_issue_for_ents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IssueForEnt.Create().
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (ifec *IssueForEntCreate) OnConflict(opts ...sql.ConflictOption) *IssueForEntUpsertOne {
	ifec.conflict = opts
	return &IssueForEntUpsertOne{
		create: ifec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IssueForEnt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ifec *IssueForEntCreate) OnConflictColumns(columns ...string) *IssueForEntUpsertOne {
	ifec.conflict = append(ifec.conflict, sql.ConflictColumns(columns...))
	return &IssueForEntUpsertOne{
		create: ifec,
	}
}

type (
	// IssueForEntUpsertOne is the builder for "upsert"-ing
	//  one IssueForEnt node.
	IssueForEntUpsertOne struct {
		create *IssueForEntCreate
	}

	// IssueForEntUpsert is the "OnConflict" setter.
	IssueForEntUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.IssueForEnt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IssueForEntUpsertOne) UpdateNewValues() *IssueForEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IssueForEnt.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IssueForEntUpsertOne) Ignore() *IssueForEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IssueForEntUpsertOne) DoNothing() *IssueForEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IssueForEntCreate.OnConflict
// documentation for more info.
func (u *IssueForEntUpsertOne) Update(set func(*IssueForEntUpsert)) *IssueForEntUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IssueForEntUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *IssueForEntUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IssueForEntCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IssueForEntUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IssueForEntUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IssueForEntUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IssueForEntCreateBulk is the builder for creating many IssueForEnt entities in bulk.
type IssueForEntCreateBulk struct {
	config
	err      error
	builders []*IssueForEntCreate
	conflict []sql.ConflictOption
}

// Save creates the IssueForEnt entities in the database.
func (ifecb *IssueForEntCreateBulk) Save(ctx context.Context) ([]*IssueForEnt, error) {
	if ifecb.err != nil {
		return nil, ifecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ifecb.builders))
	nodes := make([]*IssueForEnt, len(ifecb.builders))
	mutators := make([]Mutator, len(ifecb.builders))
	for i := range ifecb.builders {
		func(i int, root context.Context) {
			builder := ifecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IssueForEntMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ifecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ifecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ifecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ifecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ifecb *IssueForEntCreateBulk) SaveX(ctx context.Context) []*IssueForEnt {
	v, err := ifecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ifecb *IssueForEntCreateBulk) Exec(ctx context.Context) error {
	_, err := ifecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifecb *IssueForEntCreateBulk) ExecX(ctx context.Context) {
	if err := ifecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IssueForEnt.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (ifecb *IssueForEntCreateBulk) OnConflict(opts ...sql.ConflictOption) *IssueForEntUpsertBulk {
	ifecb.conflict = opts
	return &IssueForEntUpsertBulk{
		create: ifecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IssueForEnt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ifecb *IssueForEntCreateBulk) OnConflictColumns(columns ...string) *IssueForEntUpsertBulk {
	ifecb.conflict = append(ifecb.conflict, sql.ConflictColumns(columns...))
	return &IssueForEntUpsertBulk{
		create: ifecb,
	}
}

// IssueForEntUpsertBulk is the builder for "upsert"-ing
// a bulk of IssueForEnt nodes.
type IssueForEntUpsertBulk struct {
	create *IssueForEntCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IssueForEnt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IssueForEntUpsertBulk) UpdateNewValues() *IssueForEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IssueForEnt.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IssueForEntUpsertBulk) Ignore() *IssueForEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IssueForEntUpsertBulk) DoNothing() *IssueForEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IssueForEntCreateBulk.OnConflict
// documentation for more info.
func (u *IssueForEntUpsertBulk) Update(set func(*IssueForEntUpsert)) *IssueForEntUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IssueForEntUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *IssueForEntUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IssueForEntCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IssueForEntCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IssueForEntUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
