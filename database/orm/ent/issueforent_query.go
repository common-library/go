// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/common-library/go/database/orm/ent/issueforent"
	"github.com/common-library/go/database/orm/ent/predicate"
	"github.com/common-library/go/database/orm/ent/repositoryforent"
)

// IssueForEntQuery is the builder for querying IssueForEnt entities.
type IssueForEntQuery struct {
	config
	ctx            *QueryContext
	order          []issueforent.OrderOption
	inters         []Interceptor
	predicates     []predicate.IssueForEnt
	withRepository *RepositoryForEntQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IssueForEntQuery builder.
func (ifeq *IssueForEntQuery) Where(ps ...predicate.IssueForEnt) *IssueForEntQuery {
	ifeq.predicates = append(ifeq.predicates, ps...)
	return ifeq
}

// Limit the number of records to be returned by this query.
func (ifeq *IssueForEntQuery) Limit(limit int) *IssueForEntQuery {
	ifeq.ctx.Limit = &limit
	return ifeq
}

// Offset to start from.
func (ifeq *IssueForEntQuery) Offset(offset int) *IssueForEntQuery {
	ifeq.ctx.Offset = &offset
	return ifeq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ifeq *IssueForEntQuery) Unique(unique bool) *IssueForEntQuery {
	ifeq.ctx.Unique = &unique
	return ifeq
}

// Order specifies how the records should be ordered.
func (ifeq *IssueForEntQuery) Order(o ...issueforent.OrderOption) *IssueForEntQuery {
	ifeq.order = append(ifeq.order, o...)
	return ifeq
}

// QueryRepository chains the current query on the "repository" edge.
func (ifeq *IssueForEntQuery) QueryRepository() *RepositoryForEntQuery {
	query := (&RepositoryForEntClient{config: ifeq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ifeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ifeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(issueforent.Table, issueforent.FieldID, selector),
			sqlgraph.To(repositoryforent.Table, repositoryforent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, issueforent.RepositoryTable, issueforent.RepositoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(ifeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IssueForEnt entity from the query.
// Returns a *NotFoundError when no IssueForEnt was found.
func (ifeq *IssueForEntQuery) First(ctx context.Context) (*IssueForEnt, error) {
	nodes, err := ifeq.Limit(1).All(setContextOp(ctx, ifeq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{issueforent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ifeq *IssueForEntQuery) FirstX(ctx context.Context) *IssueForEnt {
	node, err := ifeq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IssueForEnt ID from the query.
// Returns a *NotFoundError when no IssueForEnt ID was found.
func (ifeq *IssueForEntQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ifeq.Limit(1).IDs(setContextOp(ctx, ifeq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{issueforent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ifeq *IssueForEntQuery) FirstIDX(ctx context.Context) int {
	id, err := ifeq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IssueForEnt entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IssueForEnt entity is found.
// Returns a *NotFoundError when no IssueForEnt entities are found.
func (ifeq *IssueForEntQuery) Only(ctx context.Context) (*IssueForEnt, error) {
	nodes, err := ifeq.Limit(2).All(setContextOp(ctx, ifeq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{issueforent.Label}
	default:
		return nil, &NotSingularError{issueforent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ifeq *IssueForEntQuery) OnlyX(ctx context.Context) *IssueForEnt {
	node, err := ifeq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IssueForEnt ID in the query.
// Returns a *NotSingularError when more than one IssueForEnt ID is found.
// Returns a *NotFoundError when no entities are found.
func (ifeq *IssueForEntQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ifeq.Limit(2).IDs(setContextOp(ctx, ifeq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{issueforent.Label}
	default:
		err = &NotSingularError{issueforent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ifeq *IssueForEntQuery) OnlyIDX(ctx context.Context) int {
	id, err := ifeq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IssueForEnts.
func (ifeq *IssueForEntQuery) All(ctx context.Context) ([]*IssueForEnt, error) {
	ctx = setContextOp(ctx, ifeq.ctx, ent.OpQueryAll)
	if err := ifeq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IssueForEnt, *IssueForEntQuery]()
	return withInterceptors[[]*IssueForEnt](ctx, ifeq, qr, ifeq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ifeq *IssueForEntQuery) AllX(ctx context.Context) []*IssueForEnt {
	nodes, err := ifeq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IssueForEnt IDs.
func (ifeq *IssueForEntQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ifeq.ctx.Unique == nil && ifeq.path != nil {
		ifeq.Unique(true)
	}
	ctx = setContextOp(ctx, ifeq.ctx, ent.OpQueryIDs)
	if err = ifeq.Select(issueforent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ifeq *IssueForEntQuery) IDsX(ctx context.Context) []int {
	ids, err := ifeq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ifeq *IssueForEntQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ifeq.ctx, ent.OpQueryCount)
	if err := ifeq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ifeq, querierCount[*IssueForEntQuery](), ifeq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ifeq *IssueForEntQuery) CountX(ctx context.Context) int {
	count, err := ifeq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ifeq *IssueForEntQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ifeq.ctx, ent.OpQueryExist)
	switch _, err := ifeq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ifeq *IssueForEntQuery) ExistX(ctx context.Context) bool {
	exist, err := ifeq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IssueForEntQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ifeq *IssueForEntQuery) Clone() *IssueForEntQuery {
	if ifeq == nil {
		return nil
	}
	return &IssueForEntQuery{
		config:         ifeq.config,
		ctx:            ifeq.ctx.Clone(),
		order:          append([]issueforent.OrderOption{}, ifeq.order...),
		inters:         append([]Interceptor{}, ifeq.inters...),
		predicates:     append([]predicate.IssueForEnt{}, ifeq.predicates...),
		withRepository: ifeq.withRepository.Clone(),
		// clone intermediate query.
		sql:  ifeq.sql.Clone(),
		path: ifeq.path,
	}
}

// WithRepository tells the query-builder to eager-load the nodes that are connected to
// the "repository" edge. The optional arguments are used to configure the query builder of the edge.
func (ifeq *IssueForEntQuery) WithRepository(opts ...func(*RepositoryForEntQuery)) *IssueForEntQuery {
	query := (&RepositoryForEntClient{config: ifeq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ifeq.withRepository = query
	return ifeq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (ifeq *IssueForEntQuery) GroupBy(field string, fields ...string) *IssueForEntGroupBy {
	ifeq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IssueForEntGroupBy{build: ifeq}
	grbuild.flds = &ifeq.ctx.Fields
	grbuild.label = issueforent.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (ifeq *IssueForEntQuery) Select(fields ...string) *IssueForEntSelect {
	ifeq.ctx.Fields = append(ifeq.ctx.Fields, fields...)
	sbuild := &IssueForEntSelect{IssueForEntQuery: ifeq}
	sbuild.label = issueforent.Label
	sbuild.flds, sbuild.scan = &ifeq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IssueForEntSelect configured with the given aggregations.
func (ifeq *IssueForEntQuery) Aggregate(fns ...AggregateFunc) *IssueForEntSelect {
	return ifeq.Select().Aggregate(fns...)
}

func (ifeq *IssueForEntQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ifeq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ifeq); err != nil {
				return err
			}
		}
	}
	for _, f := range ifeq.ctx.Fields {
		if !issueforent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ifeq.path != nil {
		prev, err := ifeq.path(ctx)
		if err != nil {
			return err
		}
		ifeq.sql = prev
	}
	return nil
}

func (ifeq *IssueForEntQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IssueForEnt, error) {
	var (
		nodes       = []*IssueForEnt{}
		withFKs     = ifeq.withFKs
		_spec       = ifeq.querySpec()
		loadedTypes = [1]bool{
			ifeq.withRepository != nil,
		}
	)
	if ifeq.withRepository != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, issueforent.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IssueForEnt).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IssueForEnt{config: ifeq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ifeq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ifeq.withRepository; query != nil {
		if err := ifeq.loadRepository(ctx, query, nodes, nil,
			func(n *IssueForEnt, e *RepositoryForEnt) { n.Edges.Repository = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ifeq *IssueForEntQuery) loadRepository(ctx context.Context, query *RepositoryForEntQuery, nodes []*IssueForEnt, init func(*IssueForEnt), assign func(*IssueForEnt, *RepositoryForEnt)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IssueForEnt)
	for i := range nodes {
		if nodes[i].repository_for_ent_issue_for_ents == nil {
			continue
		}
		fk := *nodes[i].repository_for_ent_issue_for_ents
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(repositoryforent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "repository_for_ent_issue_for_ents" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ifeq *IssueForEntQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ifeq.querySpec()
	_spec.Node.Columns = ifeq.ctx.Fields
	if len(ifeq.ctx.Fields) > 0 {
		_spec.Unique = ifeq.ctx.Unique != nil && *ifeq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ifeq.driver, _spec)
}

func (ifeq *IssueForEntQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(issueforent.Table, issueforent.Columns, sqlgraph.NewFieldSpec(issueforent.FieldID, field.TypeInt))
	_spec.From = ifeq.sql
	if unique := ifeq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ifeq.path != nil {
		_spec.Unique = true
	}
	if fields := ifeq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, issueforent.FieldID)
		for i := range fields {
			if fields[i] != issueforent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ifeq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ifeq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ifeq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ifeq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ifeq *IssueForEntQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ifeq.driver.Dialect())
	t1 := builder.Table(issueforent.Table)
	columns := ifeq.ctx.Fields
	if len(columns) == 0 {
		columns = issueforent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ifeq.sql != nil {
		selector = ifeq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ifeq.ctx.Unique != nil && *ifeq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ifeq.predicates {
		p(selector)
	}
	for _, p := range ifeq.order {
		p(selector)
	}
	if offset := ifeq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ifeq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// IssueForEntGroupBy is the group-by builder for IssueForEnt entities.
type IssueForEntGroupBy struct {
	selector
	build *IssueForEntQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ifegb *IssueForEntGroupBy) Aggregate(fns ...AggregateFunc) *IssueForEntGroupBy {
	ifegb.fns = append(ifegb.fns, fns...)
	return ifegb
}

// Scan applies the selector query and scans the result into the given value.
func (ifegb *IssueForEntGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ifegb.build.ctx, ent.OpQueryGroupBy)
	if err := ifegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IssueForEntQuery, *IssueForEntGroupBy](ctx, ifegb.build, ifegb, ifegb.build.inters, v)
}

func (ifegb *IssueForEntGroupBy) sqlScan(ctx context.Context, root *IssueForEntQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ifegb.fns))
	for _, fn := range ifegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ifegb.flds)+len(ifegb.fns))
		for _, f := range *ifegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ifegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ifegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IssueForEntSelect is the builder for selecting fields of IssueForEnt entities.
type IssueForEntSelect struct {
	*IssueForEntQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ifes *IssueForEntSelect) Aggregate(fns ...AggregateFunc) *IssueForEntSelect {
	ifes.fns = append(ifes.fns, fns...)
	return ifes
}

// Scan applies the selector query and scans the result into the given value.
func (ifes *IssueForEntSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ifes.ctx, ent.OpQuerySelect)
	if err := ifes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IssueForEntQuery, *IssueForEntSelect](ctx, ifes.IssueForEntQuery, ifes, ifes.inters, v)
}

func (ifes *IssueForEntSelect) sqlScan(ctx context.Context, root *IssueForEntQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ifes.fns))
	for _, fn := range ifes.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ifes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ifes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
