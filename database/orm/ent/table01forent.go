// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/common-library/go/database/orm/ent/table01forent"
)

// Table01ForEnt is the model entity for the Table01ForEnt schema.
type Table01ForEnt struct {
	config `gqlgen:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CommonField01 holds the value of the "common_field01" field.
	CommonField01 int `json:"common_field01,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Field01 holds the value of the "field01" field.
	Field01 string `json:"field01,omitempty"`
	// Field02 holds the value of the "field02" field.
	Field02 int `json:"field02,omitempty"`
	// Field03 holds the value of the "field03" field.
	Field03 bool `json:"field03,omitempty"`
	// Field04 holds the value of the "field04" field.
	Field04 table01forent.Field04 `json:"field04,omitempty"`
	// Field05 holds the value of the "field05" field.
	Field05 string `json:"field05,omitempty"`
	// Field06 holds the value of the "field06" field.
	Field06 *string `json:"field06,omitempty"`
	// Field07 holds the value of the "field07" field.
	Field07 int64 `json:"field07,omitempty"`
	// Field08 holds the value of the "field08" field.
	Field08 float64 `json:"field08,omitempty"`
	// Field09 holds the value of the "field09" field.
	Field09 string `json:"field09,omitempty"`
	// Field10 holds the value of the "field10" field.
	Field10 string `gqlgen:"-" json:"-"`
	// comment
	Field11 string `json:"field11,omitempty"`
	// comment
	Field12 string `json:"field12,omitempty"`
	// Field13 holds the value of the "field13" field.
	//
	// Deprecated: deprecated
	Field13 string `json:"field13,omitempty"`
	// Field14 holds the value of the "field14" field.
	Field14 string `json:"field14,omitempty"`
	// Field15 holds the value of the "field15" field.
	Field15      string `json:"field15,omitempty" gqlgen:"gql_name"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Table01ForEnt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case table01forent.FieldField03:
			values[i] = new(sql.NullBool)
		case table01forent.FieldField08:
			values[i] = new(sql.NullFloat64)
		case table01forent.FieldID, table01forent.FieldCommonField01, table01forent.FieldField02, table01forent.FieldField07:
			values[i] = new(sql.NullInt64)
		case table01forent.FieldField01, table01forent.FieldField04, table01forent.FieldField05, table01forent.FieldField06, table01forent.FieldField09, table01forent.FieldField10, table01forent.FieldField11, table01forent.FieldField12, table01forent.FieldField13, table01forent.FieldField14, table01forent.FieldField15:
			values[i] = new(sql.NullString)
		case table01forent.FieldCreateTime, table01forent.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Table01ForEnt fields.
func (te *Table01ForEnt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case table01forent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			te.ID = int(value.Int64)
		case table01forent.FieldCommonField01:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field common_field01", values[i])
			} else if value.Valid {
				te.CommonField01 = int(value.Int64)
			}
		case table01forent.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				te.CreateTime = value.Time
			}
		case table01forent.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				te.UpdateTime = value.Time
			}
		case table01forent.FieldField01:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field01", values[i])
			} else if value.Valid {
				te.Field01 = value.String
			}
		case table01forent.FieldField02:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field field02", values[i])
			} else if value.Valid {
				te.Field02 = int(value.Int64)
			}
		case table01forent.FieldField03:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field field03", values[i])
			} else if value.Valid {
				te.Field03 = value.Bool
			}
		case table01forent.FieldField04:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field04", values[i])
			} else if value.Valid {
				te.Field04 = table01forent.Field04(value.String)
			}
		case table01forent.FieldField05:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field05", values[i])
			} else if value.Valid {
				te.Field05 = value.String
			}
		case table01forent.FieldField06:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field06", values[i])
			} else if value.Valid {
				te.Field06 = new(string)
				*te.Field06 = value.String
			}
		case table01forent.FieldField07:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field field07", values[i])
			} else if value.Valid {
				te.Field07 = value.Int64
			}
		case table01forent.FieldField08:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field field08", values[i])
			} else if value.Valid {
				te.Field08 = value.Float64
			}
		case table01forent.FieldField09:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field09", values[i])
			} else if value.Valid {
				te.Field09 = value.String
			}
		case table01forent.FieldField10:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field10", values[i])
			} else if value.Valid {
				te.Field10 = value.String
			}
		case table01forent.FieldField11:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field11", values[i])
			} else if value.Valid {
				te.Field11 = value.String
			}
		case table01forent.FieldField12:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field12", values[i])
			} else if value.Valid {
				te.Field12 = value.String
			}
		case table01forent.FieldField13:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field13", values[i])
			} else if value.Valid {
				te.Field13 = value.String
			}
		case table01forent.FieldField14:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field14", values[i])
			} else if value.Valid {
				te.Field14 = value.String
			}
		case table01forent.FieldField15:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field15", values[i])
			} else if value.Valid {
				te.Field15 = value.String
			}
		default:
			te.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Table01ForEnt.
// This includes values selected through modifiers, order, etc.
func (te *Table01ForEnt) Value(name string) (ent.Value, error) {
	return te.selectValues.Get(name)
}

// Update returns a builder for updating this Table01ForEnt.
// Note that you need to call Table01ForEnt.Unwrap() before calling this method if this Table01ForEnt
// was returned from a transaction, and the transaction was committed or rolled back.
func (te *Table01ForEnt) Update() *Table01ForEntUpdateOne {
	return NewTable01ForEntClient(te.config).UpdateOne(te)
}

// Unwrap unwraps the Table01ForEnt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (te *Table01ForEnt) Unwrap() *Table01ForEnt {
	_tx, ok := te.config.driver.(*txDriver)
	if !ok {
		panic("ent: Table01ForEnt is not a transactional entity")
	}
	te.config.driver = _tx.drv
	return te
}

// String implements the fmt.Stringer.
func (te *Table01ForEnt) String() string {
	var builder strings.Builder
	builder.WriteString("Table01ForEnt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", te.ID))
	builder.WriteString("common_field01=")
	builder.WriteString(fmt.Sprintf("%v", te.CommonField01))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(te.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(te.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("field01=")
	builder.WriteString(te.Field01)
	builder.WriteString(", ")
	builder.WriteString("field02=")
	builder.WriteString(fmt.Sprintf("%v", te.Field02))
	builder.WriteString(", ")
	builder.WriteString("field03=")
	builder.WriteString(fmt.Sprintf("%v", te.Field03))
	builder.WriteString(", ")
	builder.WriteString("field04=")
	builder.WriteString(fmt.Sprintf("%v", te.Field04))
	builder.WriteString(", ")
	builder.WriteString("field05=")
	builder.WriteString(te.Field05)
	builder.WriteString(", ")
	if v := te.Field06; v != nil {
		builder.WriteString("field06=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("field07=")
	builder.WriteString(fmt.Sprintf("%v", te.Field07))
	builder.WriteString(", ")
	builder.WriteString("field08=")
	builder.WriteString(fmt.Sprintf("%v", te.Field08))
	builder.WriteString(", ")
	builder.WriteString("field09=")
	builder.WriteString(te.Field09)
	builder.WriteString(", ")
	builder.WriteString("field10=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("field11=")
	builder.WriteString(te.Field11)
	builder.WriteString(", ")
	builder.WriteString("field12=")
	builder.WriteString(te.Field12)
	builder.WriteString(", ")
	builder.WriteString("field13=")
	builder.WriteString(te.Field13)
	builder.WriteString(", ")
	builder.WriteString("field14=")
	builder.WriteString(te.Field14)
	builder.WriteString(", ")
	builder.WriteString("field15=")
	builder.WriteString(te.Field15)
	builder.WriteByte(')')
	return builder.String()
}

// Table01ForEnts is a parsable slice of Table01ForEnt.
type Table01ForEnts []*Table01ForEnt
